import asyncio
import locale
from asyncio import AbstractEventLoop

from src.accessLevelChecking.accessLevelCheckingHelper import AccessLevelCheckingHelper
from src.accessLevelChecking.accessLevelCheckingHelperInterface import AccessLevelCheckingHelperInterface
from src.aniv.contentScanner.anivContentScanner import AnivContentScanner
from src.aniv.contentScanner.anivContentScannerInterface import AnivContentScannerInterface
from src.aniv.helpers.anivCopyMessageTimeoutScoreHelper import AnivCopyMessageTimeoutScoreHelper
from src.aniv.helpers.anivCopyMessageTimeoutScoreHelperInterface import AnivCopyMessageTimeoutScoreHelperInterface
from src.aniv.helpers.mostRecentAnivMessageTimeoutHelper import MostRecentAnivMessageTimeoutHelper
from src.aniv.helpers.mostRecentAnivMessageTimeoutHelperInterface import MostRecentAnivMessageTimeoutHelperInterface
from src.aniv.mapper.anivJsonMapper import AnivJsonMapper
from src.aniv.mapper.anivJsonMapperInterface import AnivJsonMapperInterface
from src.aniv.presenters.anivCopyMessageTimeoutScorePresenter import AnivCopyMessageTimeoutScorePresenter
from src.aniv.presenters.anivCopyMessageTimeoutScorePresenterInterface import \
    AnivCopyMessageTimeoutScorePresenterInterface
from src.aniv.repositories.anivCopyMessageTimeoutScoreRepository import AnivCopyMessageTimeoutScoreRepository
from src.aniv.repositories.anivCopyMessageTimeoutScoreRepositoryInterface import \
    AnivCopyMessageTimeoutScoreRepositoryInterface
from src.aniv.repositories.anivUserIdsRepository import AnivUserIdsRepository
from src.aniv.repositories.anivUserIdsRepositoryInterface import AnivUserIdsRepositoryInterface
from src.aniv.repositories.mostRecentAnivMessageRepository import MostRecentAnivMessageRepository
from src.aniv.repositories.mostRecentAnivMessageRepositoryInterface import MostRecentAnivMessageRepositoryInterface
from src.aniv.settings.anivSettings import AnivSettings
from src.aniv.settings.anivSettingsInterface import AnivSettingsInterface
from src.asplodieStats.asplodieStatsPresenter import AsplodieStatsPresenter
from src.asplodieStats.repository.asplodieStatsRepository import AsplodieStatsRepository
from src.asplodieStats.repository.asplodieStatsRepositoryInterface import AsplodieStatsRepositoryInterface
from src.beanStats.beanStatsPresenter import BeanStatsPresenter
from src.beanStats.beanStatsPresenterInterface import BeanStatsPresenterInterface
from src.beanStats.beanStatsRepository import BeanStatsRepository
from src.beanStats.beanStatsRepositoryInterface import BeanStatsRepositoryInterface
from src.channelPointRedemptions.casualGamePollPointRedemption import CasualGamePollPointRedemption
from src.channelPointRedemptions.chatterPreferredTtsPointRedemption import ChatterPreferredTtsPointRedemption
from src.channelPointRedemptions.cutenessPointRedemption import CutenessPointRedemption
from src.channelPointRedemptions.decTalkSongPointRedemption import DecTalkSongPointRedemption
from src.channelPointRedemptions.pkmnBattlePointRedemption import PkmnBattlePointRedemption
from src.channelPointRedemptions.pkmnCatchPointRedemption import PkmnCatchPointRedemption
from src.channelPointRedemptions.pkmnEvolvePointRedemption import PkmnEvolvePointRedemption
from src.channelPointRedemptions.pkmnShinyPointRedemption import PkmnShinyPointRedemption
from src.channelPointRedemptions.redemptionCounterPointRedemption import RedemptionCounterPointRedemption
from src.channelPointRedemptions.soundAlertPointRedemption import SoundAlertPointRedemption
from src.channelPointRedemptions.superTriviaGamePointRedemption import SuperTriviaGamePointRedemption
from src.channelPointRedemptions.superTriviaLotrGamePointRedemption import SuperTriviaLotrGamePointRedemption
from src.channelPointRedemptions.triviaGamePointRedemption import TriviaGamePointRedemption
from src.channelPointRedemptions.ttsChatterPointRedemption import TtsChatterPointRedemption
from src.channelPointRedemptions.voicemailPointRedemption import VoicemailPointRedemption
from src.chatActions.anivCheckChatAction import AnivCheckChatAction
from src.chatActions.chatBackMessagesChatAction import ChatBackMessagesChatAction
from src.chatActions.chatLoggerChatAction import ChatLoggerChatAction
from src.chatActions.cheerActionsWizardChatAction import CheerActionsWizardChatAction
from src.chatActions.manager.chatActionsManager import ChatActionsManager
from src.chatActions.manager.chatActionsManagerInterface import ChatActionsManagerInterface
from src.chatActions.persistAllUsersChatAction import PersistAllUsersChatAction
from src.chatActions.recurringActionsWizardChatAction import RecurringActionsWizardChatAction
from src.chatActions.saveMostRecentAnivMessageChatAction import SaveMostRecentAnivMessageChatAction
from src.chatActions.soundAlertChatAction import SoundAlertChatAction
from src.chatActions.supStreamerChatAction import SupStreamerChatAction
from src.chatActions.ttsChatterChatAction import TtsChatterChatAction
from src.chatActions.voicemailChatAction import VoicemailChatAction
from src.chatLogger.chatLogger import ChatLogger
from src.chatLogger.chatLoggerInterface import ChatLoggerInterface
from src.chatterInventory.configuration.absChatterItemEventHandler import AbsChatterItemEventHandler
from src.chatterInventory.configuration.chatterItemEventHandler import ChatterItemEventHandler
from src.chatterInventory.helpers.chatterInventoryHelper import ChatterInventoryHelper
from src.chatterInventory.helpers.chatterInventoryHelperInterface import ChatterInventoryHelperInterface
from src.chatterInventory.helpers.useChatterItemHelper import UseChatterItemHelper
from src.chatterInventory.helpers.useChatterItemHelperInterface import UseChatterItemHelperInterface
from src.chatterInventory.idGenerator.chatterInventoryIdGenerator import ChatterInventoryIdGenerator
from src.chatterInventory.idGenerator.chatterInventoryIdGeneratorInterface import ChatterInventoryIdGeneratorInterface
from src.chatterInventory.machine.chatterInventoryItemUseMachine import ChatterInventoryItemUseMachine
from src.chatterInventory.machine.chatterInventoryItemUseMachineInterface import ChatterInventoryItemUseMachineInterface
from src.chatterInventory.mappers.chatterInventoryMapper import ChatterInventoryMapper
from src.chatterInventory.mappers.chatterInventoryMapperInterface import ChatterInventoryMapperInterface
from src.chatterInventory.mappers.itemRequestMessageParser import ItemRequestMessageParser
from src.chatterInventory.repositories.chatterInventoryRepository import ChatterInventoryRepository
from src.chatterInventory.repositories.chatterInventoryRepositoryInterface import ChatterInventoryRepositoryInterface
from src.chatterInventory.settings.chatterInventorySettings import ChatterInventorySettings
from src.chatterInventory.settings.chatterInventorySettingsInterface import ChatterInventorySettingsInterface
from src.chatterInventory.useCases.cassetteTapeItemUseCase import CassetteTapeItemUseCase
from src.chatterPreferredTts.chatterPreferredTtsPresenter import ChatterPreferredTtsPresenter
from src.chatterPreferredTts.helper.chatterPreferredTtsHelper import ChatterPreferredTtsHelper
from src.chatterPreferredTts.helper.chatterPreferredTtsHelperInterface import ChatterPreferredTtsHelperInterface
from src.chatterPreferredTts.helper.chatterPreferredTtsUserMessageHelper import ChatterPreferredTtsUserMessageHelper
from src.chatterPreferredTts.helper.chatterPreferredTtsUserMessageHelperInterface import \
    ChatterPreferredTtsUserMessageHelperInterface
from src.chatterPreferredTts.mapper.chatterPreferredTtsJsonMapper import ChatterPreferredTtsJsonMapper
from src.chatterPreferredTts.mapper.chatterPreferredTtsJsonMapperInterface import ChatterPreferredTtsJsonMapperInterface
from src.chatterPreferredTts.repository.chatterPreferredTtsRepository import ChatterPreferredTtsRepository
from src.chatterPreferredTts.repository.chatterPreferredTtsRepositoryInterface import \
    ChatterPreferredTtsRepositoryInterface
from src.chatterPreferredTts.settings.chatterPreferredTtsSettingsRepository import ChatterPreferredTtsSettingsRepository
from src.chatterPreferredTts.settings.chatterPreferredTtsSettingsRepositoryInterface import \
    ChatterPreferredTtsSettingsRepositoryInterface
from src.cheerActions.airStrike.airStrikeCheerActionHelper import AirStrikeCheerActionHelper
from src.cheerActions.airStrike.airStrikeCheerActionHelperInterface import AirStrikeCheerActionHelperInterface
from src.cheerActions.beanChance.beanChanceCheerActionHelper import BeanChanceCheerActionHelper
from src.cheerActions.beanChance.beanChanceCheerActionHelperInterface import BeanChanceCheerActionHelperInterface
from src.cheerActions.cheerActionHelper import CheerActionHelper
from src.cheerActions.cheerActionHelperInterface import CheerActionHelperInterface
from src.cheerActions.cheerActionJsonMapper import CheerActionJsonMapper
from src.cheerActions.cheerActionJsonMapperInterface import CheerActionJsonMapperInterface
from src.cheerActions.cheerActionsRepository import CheerActionsRepository
from src.cheerActions.cheerActionsRepositoryInterface import CheerActionsRepositoryInterface
from src.cheerActions.cheerActionsWizard import CheerActionsWizard
from src.cheerActions.cheerActionsWizardInterface import CheerActionsWizardInterface
from src.cheerActions.crowdControl.crowdControlCheerActionHelper import CrowdControlCheerActionHelper
from src.cheerActions.crowdControl.crowdControlCheerActionHelperInterface import CrowdControlCheerActionHelperInterface
from src.cheerActions.itemUse.itemUseCheerActionHelper import ItemUseCheerActionHelper
from src.cheerActions.itemUse.itemUseCheerActionHelperInterface import ItemUseCheerActionHelperInterface
from src.cheerActions.settings.cheerActionSettingsRepository import CheerActionSettingsRepository
from src.cheerActions.settings.cheerActionSettingsRepositoryInterface import CheerActionSettingsRepositoryInterface
from src.cheerActions.soundAlert.soundAlertCheerActionHelper import SoundAlertCheerActionHelper
from src.cheerActions.soundAlert.soundAlertCheerActionHelperInterface import SoundAlertCheerActionHelperInterface
from src.cheerActions.timeout.timeoutCheerActionHelper import TimeoutCheerActionHelper
from src.cheerActions.timeout.timeoutCheerActionHelperInterface import TimeoutCheerActionHelperInterface
from src.cheerActions.voicemail.voicemailCheerActionHelper import VoicemailCheerActionHelper
from src.cheerActions.voicemail.voicemailCheerActionHelperInterface import VoicemailCheerActionHelperInterface
from src.commodoreSam.apiService.commodoreSamApiService import CommodoreSamApiService
from src.commodoreSam.apiService.commodoreSamApiServiceInterface import CommodoreSamApiServiceInterface
from src.commodoreSam.commodoreSamMessageCleaner import CommodoreSamMessageCleaner
from src.commodoreSam.commodoreSamMessageCleanerInterface import CommodoreSamMessageCleanerInterface
from src.commodoreSam.helper.commodoreSamHelper import CommodoreSamHelper
from src.commodoreSam.helper.commodoreSamHelperInterface import CommodoreSamHelperInterface
from src.commodoreSam.settings.commodoreSamSettingsRepository import CommodoreSamSettingsRepository
from src.commodoreSam.settings.commodoreSamSettingsRepositoryInterface import CommodoreSamSettingsRepositoryInterface
from src.contentScanner.bannedWordsRepository import BannedWordsRepository
from src.contentScanner.bannedWordsRepositoryInterface import BannedWordsRepositoryInterface
from src.contentScanner.contentScanner import ContentScanner
from src.contentScanner.contentScannerInterface import ContentScannerInterface
from src.crowdControl.automator.crowdControlAutomator import CrowdControlAutomator
from src.crowdControl.automator.crowdControlAutomatorInterface import CrowdControlAutomatorInterface
from src.crowdControl.bizhawk.bizhawkActionHandler import BizhawkActionHandler
from src.crowdControl.bizhawk.bizhawkKeyMapper import BizhawkKeyMapper
from src.crowdControl.bizhawk.bizhawkKeyMapperInterface import BizhawkKeyMapperInterface
from src.crowdControl.bizhawk.bizhawkSettingsRepository import BizhawkSettingsRepository
from src.crowdControl.bizhawk.bizhawkSettingsRepositoryInterface import BizhawkSettingsRepositoryInterface
from src.crowdControl.crowdControlActionHandler import CrowdControlActionHandler
from src.crowdControl.crowdControlMachine import CrowdControlMachine
from src.crowdControl.crowdControlMachineInterface import CrowdControlMachineInterface
from src.crowdControl.idGenerator.crowdControlIdGenerator import CrowdControlIdGenerator
from src.crowdControl.idGenerator.crowdControlIdGeneratorInterface import CrowdControlIdGeneratorInterface
from src.crowdControl.message.crowdControlMessageHandler import CrowdControlMessageHandler
from src.crowdControl.message.crowdControlMessageListener import CrowdControlMessageListener
from src.crowdControl.message.crowdControlMessagePresenter import CrowdControlMessagePresenter
from src.crowdControl.message.crowdControlMessagePresenterInterface import CrowdControlMessagePresenterInterface
from src.crowdControl.settings.crowdControlSettingsRepository import CrowdControlSettingsRepository
from src.crowdControl.settings.crowdControlSettingsRepositoryInterface import CrowdControlSettingsRepositoryInterface
from src.crowdControl.utils.crowdControlUserInputUtils import CrowdControlUserInputUtils
from src.crowdControl.utils.crowdControlUserInputUtilsInterface import CrowdControlUserInputUtilsInterface
from src.cuteness.cutenessPresenter import CutenessPresenter
from src.cuteness.cutenessPresenterInterface import CutenessPresenterInterface
from src.cuteness.cutenessRepository import CutenessRepository
from src.cuteness.cutenessRepositoryInterface import CutenessRepositoryInterface
from src.cuteness.cutenessUtils import CutenessUtils
from src.cuteness.cutenessUtilsInterface import CutenessUtilsInterface
from src.cynanBot import CynanBot
from src.decTalk.apiService.decTalkApiService import DecTalkApiService
from src.decTalk.apiService.decTalkApiServiceInterface import DecTalkApiServiceInterface
from src.decTalk.decTalkMessageCleaner import DecTalkMessageCleaner
from src.decTalk.decTalkMessageCleanerInterface import DecTalkMessageCleanerInterface
from src.decTalk.helper.decTalkHelper import DecTalkHelper
from src.decTalk.helper.decTalkHelperInterface import DecTalkHelperInterface
from src.decTalk.mapper.decTalkVoiceMapper import DecTalkVoiceMapper
from src.decTalk.mapper.decTalkVoiceMapperInterface import DecTalkVoiceMapperInterface
from src.decTalk.settings.decTalkSettingsRepository import DecTalkSettingsRepository
from src.decTalk.settings.decTalkSettingsRepositoryInterface import DecTalkSettingsRepositoryInterface
from src.deepL.deepLApiService import DeepLApiService
from src.deepL.deepLApiServiceInterface import DeepLApiServiceInterface
from src.deepL.deepLJsonMapper import DeepLJsonMapper
from src.deepL.deepLJsonMapperInterface import DeepLJsonMapperInterface
from src.ecco.eccoApiService import EccoApiService
from src.ecco.eccoApiServiceInterface import EccoApiServiceInterface
from src.ecco.eccoHelper import EccoHelper
from src.ecco.eccoHelperInterface import EccoHelperInterface
from src.ecco.eccoResponseParser import EccoResponseParser
from src.ecco.eccoResponseParserInterface import EccoResponseParserInterface
from src.emojiHelper.emojiHelper import EmojiHelper
from src.emojiHelper.emojiHelperInterface import EmojiHelperInterface
from src.emojiHelper.emojiRepository import EmojiRepository
from src.emojiHelper.emojiRepositoryInterface import EmojiRepositoryInterface
from src.funtoon.apiService.funtoonApiService import FuntoonApiService
from src.funtoon.apiService.funtoonApiServiceInterface import FuntoonApiServiceInterface
from src.funtoon.funtoonHelper import FuntoonHelper
from src.funtoon.funtoonHelperInterface import FuntoonHelperInterface
from src.funtoon.funtoonUserIdProvider import FuntoonUserIdProvider
from src.funtoon.funtoonUserIdProviderInterface import FuntoonUserIdProviderInterface
from src.funtoon.jsonMapper.funtoonJsonMapper import FuntoonJsonMapper
from src.funtoon.jsonMapper.funtoonJsonMapperInterface import FuntoonJsonMapperInterface
from src.funtoon.tokens.funtoonTokensRepository import FuntoonTokensRepository
from src.funtoon.tokens.funtoonTokensRepositoryInterface import FuntoonTokensRepositoryInterface
from src.glacialTtsStorage.fileRetriever.glacialTtsFileRetriever import GlacialTtsFileRetriever
from src.glacialTtsStorage.fileRetriever.glacialTtsFileRetrieverInterface import GlacialTtsFileRetrieverInterface
from src.glacialTtsStorage.idGenerator.glacialTtsIdGenerator import GlacialTtsIdGenerator
from src.glacialTtsStorage.idGenerator.glacialTtsIdGeneratorInterface import GlacialTtsIdGeneratorInterface
from src.glacialTtsStorage.mapper.glacialTtsDataMapper import GlacialTtsDataMapper
from src.glacialTtsStorage.mapper.glacialTtsDataMapperInterface import GlacialTtsDataMapperInterface
from src.glacialTtsStorage.repository.glacialTtsStorageRepository import GlacialTtsStorageRepository
from src.glacialTtsStorage.repository.glacialTtsStorageRepositoryInterface import GlacialTtsStorageRepositoryInterface
from src.google.accessToken.googleApiAccessTokenStorage import GoogleApiAccessTokenStorage
from src.google.accessToken.googleApiAccessTokenStorageInterface import GoogleApiAccessTokenStorageInterface
from src.google.apiService.googleApiService import GoogleApiService
from src.google.apiService.googleApiServiceInterface import GoogleApiServiceInterface
from src.google.googleTtsMessageCleaner import GoogleTtsMessageCleaner
from src.google.googleTtsMessageCleanerInterface import GoogleTtsMessageCleanerInterface
from src.google.helpers.googleFileExtensionHelper import GoogleFileExtensionHelper
from src.google.helpers.googleFileExtensionHelperInterface import GoogleFileExtensionHelperInterface
from src.google.helpers.googleTtsApiHelper import GoogleTtsApiHelper
from src.google.helpers.googleTtsApiHelperInterface import GoogleTtsApiHelperInterface
from src.google.helpers.googleTtsHelper import GoogleTtsHelper
from src.google.helpers.googleTtsHelperInterface import GoogleTtsHelperInterface
from src.google.helpers.googleTtsVoicesHelper import GoogleTtsVoicesHelper
from src.google.helpers.googleTtsVoicesHelperInterface import GoogleTtsVoicesHelperInterface
from src.google.jsonMapper.googleJsonMapper import GoogleJsonMapper
from src.google.jsonMapper.googleJsonMapperInterface import GoogleJsonMapperInterface
from src.google.jwtBuilder.googleJwtBuilder import GoogleJwtBuilder
from src.google.jwtBuilder.googleJwtBuilderInterface import GoogleJwtBuilderInterface
from src.google.settings.googleSettingsRepository import GoogleSettingsRepository
from src.google.settings.googleSettingsRepositoryInterface import GoogleSettingsRepositoryInterface
from src.halfLife.halfLifeMessageCleaner import HalfLifeMessageCleaner
from src.halfLife.halfLifeMessageCleanerInterface import HalfLifeMessageCleanerInterface
from src.halfLife.helper.halfLifeTtsHelper import HalfLifeTtsHelper
from src.halfLife.helper.halfLifeTtsHelperInterface import HalfLifeTtsHelperInterface
from src.halfLife.parser.halfLifeMessageVoiceParser import HalfLifeMessageVoiceParser
from src.halfLife.parser.halfLifeMessageVoiceParserInterface import HalfLifeMessageVoiceParserInterface
from src.halfLife.parser.halfLifeVoiceParser import HalfLifeVoiceParser
from src.halfLife.parser.halfLifeVoiceParserInterface import HalfLifeVoiceParserInterface
from src.halfLife.service.halfLifeTtsService import HalfLifeTtsService
from src.halfLife.service.halfLifeTtsServiceInterface import HalfLifeTtsServiceInterface
from src.halfLife.settings.halfLifeSettingsRepository import HalfLifeSettingsRepository
from src.halfLife.settings.halfLifeSettingsRepositoryInterface import HalfLifeSettingsRepositoryInterface
from src.jisho.jishoApiService import JishoApiService
from src.jisho.jishoApiServiceInterface import JishoApiServiceInterface
from src.jisho.jishoJsonMapper import JishoJsonMapper
from src.jisho.jishoJsonMapperInterface import JishoJsonMapperInterface
from src.jisho.jishoPresenter import JishoPresenter
from src.jisho.jishoPresenterInterface import JishoPresenterInterface
from src.language.jishoHelper import JishoHelper
from src.language.jishoHelperInterface import JishoHelperInterface
from src.language.jsonMapper.languageEntryJsonMapper import LanguageEntryJsonMapper
from src.language.jsonMapper.languageEntryJsonMapperInterface import LanguageEntryJsonMapperInterface
from src.language.languagesRepository import LanguagesRepository
from src.language.languagesRepositoryInterface import LanguagesRepositoryInterface
from src.language.translation.deepLTranslationApi import DeepLTranslationApi
from src.language.translation.googleTranslationApi import GoogleTranslationApi
from src.language.translationHelper import TranslationHelper
from src.language.translationHelperInterface import TranslationHelperInterface
from src.language.wordOfTheDay.wordOfTheDayPresenter import WordOfTheDayPresenter
from src.language.wordOfTheDay.wordOfTheDayPresenterInterface import WordOfTheDayPresenterInterface
from src.language.wordOfTheDay.wordOfTheDayRepository import WordOfTheDayRepository
from src.language.wordOfTheDay.wordOfTheDayRepositoryInterface import WordOfTheDayRepositoryInterface
from src.location.locationsRepository import LocationsRepository
from src.location.locationsRepositoryInterface import LocationsRepositoryInterface
from src.location.timeZoneRepository import TimeZoneRepository
from src.location.timeZoneRepositoryInterface import TimeZoneRepositoryInterface
from src.microsoft.apiService.microsoftTtsApiService import MicrosoftTtsApiService
from src.microsoft.apiService.microsoftTtsApiServiceInterface import MicrosoftTtsApiServiceInterface
from src.microsoft.helper.microsoftTtsApiHelper import MicrosoftTtsApiHelper
from src.microsoft.helper.microsoftTtsApiHelperInterface import MicrosoftTtsApiHelperInterface
from src.microsoft.helper.microsoftTtsHelper import MicrosoftTtsHelper
from src.microsoft.helper.microsoftTtsHelperInterface import MicrosoftTtsHelperInterface
from src.microsoft.microsoftTtsMessageCleaner import MicrosoftTtsMessageCleaner
from src.microsoft.microsoftTtsMessageCleanerInterface import MicrosoftTtsMessageCleanerInterface
from src.microsoft.parser.microsoftTtsJsonParser import MicrosoftTtsJsonParser
from src.microsoft.parser.microsoftTtsJsonParserInterface import MicrosoftTtsJsonParserInterface
from src.microsoft.parser.microsoftTtsMessageVoiceParser import MicrosoftTtsMessageVoiceParser
from src.microsoft.parser.microsoftTtsMessageVoiceParserInterface import MicrosoftTtsMessageVoiceParserInterface
from src.microsoft.settings.microsoftTtsSettingsRepository import MicrosoftTtsSettingsRepository
from src.microsoft.settings.microsoftTtsSettingsRepositoryInterface import MicrosoftTtsSettingsRepositoryInterface
from src.microsoftSam.apiService.microsoftSamApiService import MicrosoftSamApiService
from src.microsoftSam.apiService.microsoftSamApiServiceInterface import MicrosoftSamApiServiceInterface
from src.microsoftSam.helper.microsoftSamApiHelper import MicrosoftSamApiHelper
from src.microsoftSam.helper.microsoftSamApiHelperInterface import MicrosoftSamApiHelperInterface
from src.microsoftSam.helper.microsoftSamHelper import MicrosoftSamHelper
from src.microsoftSam.helper.microsoftSamHelperInterface import MicrosoftSamHelperInterface
from src.microsoftSam.microsoftSamMessageCleaner import MicrosoftSamMessageCleaner
from src.microsoftSam.microsoftSamMessageCleanerInterface import MicrosoftSamMessageCleanerInterface
from src.microsoftSam.parser.microsoftSamJsonParser import MicrosoftSamJsonParser
from src.microsoftSam.parser.microsoftSamJsonParserInterface import MicrosoftSamJsonParserInterface
from src.microsoftSam.parser.microsoftSamMessageVoiceParser import MicrosoftSamMessageVoiceParser
from src.microsoftSam.parser.microsoftSamMessageVoiceParserInterface import MicrosoftSamMessageVoiceParserInterface
from src.microsoftSam.settings.microsoftSamSettingsRepository import MicrosoftSamSettingsRepository
from src.microsoftSam.settings.microsoftSamSettingsRepositoryInterface import MicrosoftSamSettingsRepositoryInterface
from src.misc.administratorProvider import AdministratorProvider
from src.misc.administratorProviderInterface import AdministratorProviderInterface
from src.misc.authRepository import AuthRepository
from src.misc.backgroundTaskHelper import BackgroundTaskHelper
from src.misc.backgroundTaskHelperInterface import BackgroundTaskHelperInterface
from src.misc.cynanBotUserIdsProvider import CynanBotUserIdsProvider
from src.misc.cynanBotUserIdsProviderInterface import CynanBotUserIdsProviderInterface
from src.misc.generalSettingsRepository import GeneralSettingsRepository
from src.mostRecentChat.mostRecentChatsRepository import MostRecentChatsRepository
from src.mostRecentChat.mostRecentChatsRepositoryInterface import MostRecentChatsRepositoryInterface
from src.network.aioHttp.aioHttpClientProvider import AioHttpClientProvider
from src.network.aioHttp.aioHttpCookieJarProvider import AioHttpCookieJarProvider
from src.network.networkClientProvider import NetworkClientProvider
from src.network.networkJsonMapper import NetworkJsonMapper
from src.network.networkJsonMapperInterface import NetworkJsonMapperInterface
from src.openWeather.apiService.openWeatherApiService import OpenWeatherApiService
from src.openWeather.apiService.openWeatherApiServiceInterface import OpenWeatherApiServiceInterface
from src.openWeather.jsonMapper.openWeatherJsonMapper import OpenWeatherJsonMapper
from src.openWeather.jsonMapper.openWeatherJsonMapperInterface import OpenWeatherJsonMapperInterface
from src.pixelsDice.configuration.pixelsDiceEventHandler import PixelsDiceEventHandler
from src.pixelsDice.listeners.pixelsDiceEventListener import PixelsDiceEventListener
from src.pixelsDice.machine.pixelsDiceMachine import PixelsDiceMachine
from src.pixelsDice.machine.pixelsDiceMachineInterface import PixelsDiceMachineInterface
from src.pixelsDice.mappers.pixelsDiceStateMapper import PixelsDiceStateMapper
from src.pixelsDice.mappers.pixelsDiceStateMapperInterface import PixelsDiceStateMapperInterface
from src.pixelsDice.pixelsDiceSettings import PixelsDiceSettings
from src.pixelsDice.pixelsDiceSettingsInterface import PixelsDiceSettingsInterface
from src.pkmn.pokepediaJsonMapper import PokepediaJsonMapper
from src.pkmn.pokepediaJsonMapperInterface import PokepediaJsonMapperInterface
from src.pkmn.pokepediaRepository import PokepediaRepository
from src.pkmn.pokepediaRepositoryInterface import PokepediaRepositoryInterface
from src.recurringActions.configuration.absRecurringActionsEventHandler import AbsRecurringActionsEventHandler
from src.recurringActions.configuration.recurringActionsEventHandler import RecurringActionsEventHandler
from src.recurringActions.jsonParser.recurringActionsJsonParser import RecurringActionsJsonParser
from src.recurringActions.jsonParser.recurringActionsJsonParserInterface import RecurringActionsJsonParserInterface
from src.recurringActions.mostRecentRecurringActionRepository import MostRecentRecurringActionRepository
from src.recurringActions.mostRecentRecurringActionRepositoryInterface import \
    MostRecentRecurringActionRepositoryInterface
from src.recurringActions.recurringActionsHelper import RecurringActionsHelper
from src.recurringActions.recurringActionsHelperInterface import RecurringActionsHelperInterface
from src.recurringActions.recurringActionsMachine import RecurringActionsMachine
from src.recurringActions.recurringActionsMachineInterface import RecurringActionsMachineInterface
from src.recurringActions.recurringActionsRepository import RecurringActionsRepository
from src.recurringActions.recurringActionsRepositoryInterface import RecurringActionsRepositoryInterface
from src.recurringActions.recurringActionsWizard import RecurringActionsWizard
from src.recurringActions.recurringActionsWizardInterface import RecurringActionsWizardInterface
from src.redemptionCounter.helpers.redemptionCounterHelper import RedemptionCounterHelper
from src.redemptionCounter.helpers.redemptionCounterHelperInterface import RedemptionCounterHelperInterface
from src.redemptionCounter.repositories.redemptionCounterRepository import RedemptionCounterRepository
from src.redemptionCounter.repositories.redemptionCounterRepositoryInterface import RedemptionCounterRepositoryInterface
from src.redemptionCounter.settings.redemptionCounterSettings import RedemptionCounterSettings
from src.redemptionCounter.settings.redemptionCounterSettingsInterface import RedemptionCounterSettingsInterface
from src.sentMessageLogger.sentMessageLogger import SentMessageLogger
from src.sentMessageLogger.sentMessageLoggerInterface import SentMessageLoggerInterface
from src.soundPlayerManager.jsonMapper.soundAlertJsonMapper import SoundAlertJsonMapper
from src.soundPlayerManager.jsonMapper.soundAlertJsonMapperInterface import SoundAlertJsonMapperInterface
from src.soundPlayerManager.jsonMapper.soundPlayerJsonMapper import SoundPlayerJsonMapper
from src.soundPlayerManager.jsonMapper.soundPlayerJsonMapperInterface import SoundPlayerJsonMapperInterface
from src.soundPlayerManager.provider.soundPlayerManagerProvider import SoundPlayerManagerProvider
from src.soundPlayerManager.provider.soundPlayerManagerProviderInterface import SoundPlayerManagerProviderInterface
from src.soundPlayerManager.randomizerHelper.soundPlayerRandomizerHelper import SoundPlayerRandomizerHelper
from src.soundPlayerManager.randomizerHelper.soundPlayerRandomizerHelperInterface import \
    SoundPlayerRandomizerHelperInterface
from src.soundPlayerManager.settings.soundPlayerSettingsRepository import SoundPlayerSettingsRepository
from src.soundPlayerManager.settings.soundPlayerSettingsRepositoryInterface import \
    SoundPlayerSettingsRepositoryInterface
from src.starWars.starWarsQuotesRepository import StarWarsQuotesRepository
from src.starWars.starWarsQuotesRepositoryInterface import StarWarsQuotesRepositoryInterface
from src.storage.backingDatabase import BackingDatabase
from src.storage.databaseType import DatabaseType
from src.storage.jsonFileReader import JsonFileReader
from src.storage.linesFileReader import LinesFileReader
from src.storage.psql.psqlBackingDatabase import PsqlBackingDatabase
from src.storage.psql.psqlCredentialsProvider import PsqlCredentialsProvider
from src.storage.psql.psqlCredentialsProviderInterface import PsqlCredentialsProviderInterface
from src.storage.sqlite.sqliteBackingDatabase import SqliteBackingDatabase
from src.storage.storageJsonMapper import StorageJsonMapper
from src.storage.storageJsonMapperInterface import StorageJsonMapperInterface
from src.streamAlertsManager.streamAlertsManager import StreamAlertsManager
from src.streamAlertsManager.streamAlertsManagerInterface import StreamAlertsManagerInterface
from src.streamAlertsManager.streamAlertsSettingsRepository import StreamAlertsSettingsRepository
from src.streamAlertsManager.streamAlertsSettingsRepositoryInterface import StreamAlertsSettingsRepositoryInterface
from src.streamElements.apiService.streamElementsApiService import StreamElementsApiService
from src.streamElements.apiService.streamElementsApiServiceInterface import StreamElementsApiServiceInterface
from src.streamElements.helper.streamElementsApiHelper import StreamElementsApiHelper
from src.streamElements.helper.streamElementsApiHelperInterface import StreamElementsApiHelperInterface
from src.streamElements.helper.streamElementsHelper import StreamElementsHelper
from src.streamElements.helper.streamElementsHelperInterface import StreamElementsHelperInterface
from src.streamElements.parser.streamElementsJsonParser import StreamElementsJsonParser
from src.streamElements.parser.streamElementsJsonParserInterface import StreamElementsJsonParserInterface
from src.streamElements.parser.streamElementsMessageVoiceParser import StreamElementsMessageVoiceParser
from src.streamElements.parser.streamElementsMessageVoiceParserInterface import \
    StreamElementsMessageVoiceParserInterface
from src.streamElements.settings.streamElementsSettingsRepository import StreamElementsSettingsRepository
from src.streamElements.settings.streamElementsSettingsRepositoryInterface import \
    StreamElementsSettingsRepositoryInterface
from src.streamElements.streamElementsMessageCleaner import StreamElementsMessageCleaner
from src.streamElements.streamElementsMessageCleanerInterface import StreamElementsMessageCleanerInterface
from src.streamElements.userKeyRepository.streamElementsUserKeyRepository import StreamElementsUserKeyRepository
from src.streamElements.userKeyRepository.streamElementsUserKeyRepositoryInterface import \
    StreamElementsUserKeyRepositoryInterface
from src.supStreamer.supStreamerHelper import SupStreamerHelper
from src.supStreamer.supStreamerHelperInterface import SupStreamerHelperInterface
from src.supStreamer.supStreamerRepository import SupStreamerRepository
from src.supStreamer.supStreamerRepositoryInterface import SupStreamerRepositoryInterface
from src.timber.timber import Timber
from src.timber.timberInterface import TimberInterface
from src.timeout.configuration.absTimeoutEventHandler import AbsTimeoutEventHandler
from src.timeout.configuration.timeoutEventHandler import TimeoutEventHandler
from src.timeout.guaranteedTimeoutUsersRepository import GuaranteedTimeoutUsersRepository
from src.timeout.guaranteedTimeoutUsersRepositoryInterface import GuaranteedTimeoutUsersRepositoryInterface
from src.timeout.idGenerator.timeoutIdGenerator import TimeoutIdGenerator
from src.timeout.idGenerator.timeoutIdGeneratorInterface import TimeoutIdGeneratorInterface
from src.timeout.machine.timeoutActionMachine import TimeoutActionMachine
from src.timeout.machine.timeoutActionMachineInterface import TimeoutActionMachineInterface
from src.timeout.mappers.chatterTimeoutHistoryMapper import ChatterTimeoutHistoryMapper
from src.timeout.mappers.chatterTimeoutHistoryMapperInterface import ChatterTimeoutHistoryMapperInterface
from src.timeout.repositories.chatterTimeoutHistoryRepository import ChatterTimeoutHistoryRepository
from src.timeout.repositories.chatterTimeoutHistoryRepositoryInterface import ChatterTimeoutHistoryRepositoryInterface
from src.timeout.settings.timeoutActionSettings import TimeoutActionSettings
from src.timeout.settings.timeoutActionSettingsInterface import TimeoutActionSettingsInterface
from src.timeout.useCases.calculateTimeoutDurationUseCase import CalculateTimeoutDurationUseCase
from src.timeout.useCases.determineAirStrikeTargetsUseCase import DetermineAirStrikeTargetsUseCase
from src.timeout.useCases.determineBananaTargetUseCase import DetermineBananaTargetUseCase
from src.timeout.useCases.determineGrenadeTargetUseCase import DetermineGrenadeTargetUseCase
from src.timeout.useCases.determineTimeoutTargetUseCase import DetermineTimeoutTargetUseCase
from src.timeout.useCases.determineTm36SplashTargetUseCase import DetermineTm36SplashTargetUseCase
from src.transparent.transparentApiService import TransparentApiService
from src.transparent.transparentApiServiceInterface import TransparentApiServiceInterface
from src.transparent.transparentXmlMapper import TransparentXmlMapper
from src.transparent.transparentXmlMapperInterface import TransparentXmlMapperInterface
from src.trivia.additionalAnswers.additionalTriviaAnswersRepository import AdditionalTriviaAnswersRepository
from src.trivia.additionalAnswers.additionalTriviaAnswersRepositoryInterface import \
    AdditionalTriviaAnswersRepositoryInterface
from src.trivia.answerChecker.triviaAnswerChecker import TriviaAnswerChecker
from src.trivia.banned.bannedTriviaGameControllersRepository import BannedTriviaGameControllersRepository
from src.trivia.banned.bannedTriviaGameControllersRepositoryInterface import \
    BannedTriviaGameControllersRepositoryInterface
from src.trivia.banned.bannedTriviaIdsRepository import BannedTriviaIdsRepository
from src.trivia.banned.bannedTriviaIdsRepositoryInterface import BannedTriviaIdsRepositoryInterface
from src.trivia.banned.triviaBanHelper import TriviaBanHelper
from src.trivia.banned.triviaBanHelperInterface import TriviaBanHelperInterface
from src.trivia.builder.triviaGameBuilder import TriviaGameBuilder
from src.trivia.builder.triviaGameBuilderInterface import TriviaGameBuilderInterface
from src.trivia.compilers.triviaAnswerCompiler import TriviaAnswerCompiler
from src.trivia.compilers.triviaAnswerCompilerInterface import TriviaAnswerCompilerInterface
from src.trivia.compilers.triviaQuestionCompiler import TriviaQuestionCompiler
from src.trivia.compilers.triviaQuestionCompilerInterface import TriviaQuestionCompilerInterface
from src.trivia.configuration.absTriviaEventHandler import AbsTriviaEventHandler
from src.trivia.configuration.triviaEventHandler import TriviaEventHandler
from src.trivia.content.triviaContentScanner import TriviaContentScanner
from src.trivia.content.triviaContentScannerInterface import TriviaContentScannerInterface
from src.trivia.emotes.triviaEmoteGenerator import TriviaEmoteGenerator
from src.trivia.emotes.triviaEmoteGeneratorInterface import TriviaEmoteGeneratorInterface
from src.trivia.emotes.triviaEmoteRepository import TriviaEmoteRepository
from src.trivia.emotes.triviaEmoteRepositoryInterface import TriviaEmoteRepositoryInterface
from src.trivia.emotes.twitch.triviaTwitchEmoteHelper import TriviaTwitchEmoteHelper
from src.trivia.emotes.twitch.triviaTwitchEmoteHelperInterface import TriviaTwitchEmoteHelperInterface
from src.trivia.gameController.triviaGameControllersRepository import TriviaGameControllersRepository
from src.trivia.gameController.triviaGameControllersRepositoryInterface import TriviaGameControllersRepositoryInterface
from src.trivia.gameController.triviaGameGlobalControllersRepository import TriviaGameGlobalControllersRepository
from src.trivia.gameController.triviaGameGlobalControllersRepositoryInterface import \
    TriviaGameGlobalControllersRepositoryInterface
from src.trivia.games.queuedTriviaGameStore import QueuedTriviaGameStore
from src.trivia.games.triviaGameStore import TriviaGameStore
from src.trivia.games.triviaGameStoreInterface import TriviaGameStoreInterface
from src.trivia.history.triviaHistoryRepository import TriviaHistoryRepository
from src.trivia.history.triviaHistoryRepositoryInterface import TriviaHistoryRepositoryInterface
from src.trivia.history.triviaQuestionOccurrencesRepository import TriviaQuestionOccurrencesRepository
from src.trivia.history.triviaQuestionOccurrencesRepositoryInterface import TriviaQuestionOccurrencesRepositoryInterface
from src.trivia.misc.triviaDifficultyParser import TriviaDifficultyParser
from src.trivia.misc.triviaDifficultyParserInterface import TriviaDifficultyParserInterface
from src.trivia.misc.triviaQuestionTypeParser import TriviaQuestionTypeParser
from src.trivia.misc.triviaQuestionTypeParserInterface import TriviaQuestionTypeParserInterface
from src.trivia.misc.triviaSourceParser import TriviaSourceParser
from src.trivia.misc.triviaSourceParserInterface import TriviaSourceParserInterface
from src.trivia.score.triviaScoreRepository import TriviaScoreRepository
from src.trivia.score.triviaScoreRepositoryInterface import TriviaScoreRepositoryInterface
from src.trivia.scraper.triviaScraper import TriviaScraper
from src.trivia.scraper.triviaScraperInterface import TriviaScraperInterface
from src.trivia.settings.triviaSettingsRepository import TriviaSettingsRepository
from src.trivia.settings.triviaSettingsRepositoryInterface import TriviaSettingsRepositoryInterface
from src.trivia.specialStatus.shinyTriviaHelper import ShinyTriviaHelper
from src.trivia.specialStatus.shinyTriviaOccurencesRepository import ShinyTriviaOccurencesRepository
from src.trivia.specialStatus.shinyTriviaOccurencesRepositoryInterface import ShinyTriviaOccurencesRepositoryInterface
from src.trivia.specialStatus.toxicTriviaHelper import ToxicTriviaHelper
from src.trivia.specialStatus.toxicTriviaOccurencesRepository import ToxicTriviaOccurencesRepository
from src.trivia.specialStatus.toxicTriviaOccurencesRepositoryInterface import ToxicTriviaOccurencesRepositoryInterface
from src.trivia.superTriviaCooldownHelper import SuperTriviaCooldownHelper
from src.trivia.triviaGameMachine import TriviaGameMachine
from src.trivia.triviaGameMachineInterface import TriviaGameMachineInterface
from src.trivia.triviaIdGenerator import TriviaIdGenerator
from src.trivia.triviaIdGeneratorInterface import TriviaIdGeneratorInterface
from src.trivia.triviaQuestionPresenter import TriviaQuestionPresenter
from src.trivia.triviaQuestionPresenterInterface import TriviaQuestionPresenterInterface
from src.trivia.triviaRepositories.bongo.bongoApiService import BongoApiService
from src.trivia.triviaRepositories.bongo.bongoApiServiceInterface import BongoApiServiceInterface
from src.trivia.triviaRepositories.bongo.bongoJsonParser import BongoJsonParser
from src.trivia.triviaRepositories.bongo.bongoJsonParserInterface import BongoJsonParserInterface
from src.trivia.triviaRepositories.bongoTriviaQuestionRepository import BongoTriviaQuestionRepository
from src.trivia.triviaRepositories.funtoonTriviaQuestionRepository import FuntoonTriviaQuestionRepository
from src.trivia.triviaRepositories.glacialTriviaQuestionRepository import GlacialTriviaQuestionRepository
from src.trivia.triviaRepositories.glacialTriviaQuestionRepositoryInterface import \
    GlacialTriviaQuestionRepositoryInterface
from src.trivia.triviaRepositories.lordOfTheRings.lotrDatabaseQuestionStorage import LotrDatabaseQuestionStorage
from src.trivia.triviaRepositories.lordOfTheRings.lotrDatabaseQuestionStorageInterface import \
    LotrDatabaseQuestionStorageInterface
from src.trivia.triviaRepositories.lotrTriviaQuestionsRepository import LotrTriviaQuestionRepository
from src.trivia.triviaRepositories.millionaire.millionaireTriviaQuestionStorage import MillionaireTriviaQuestionStorage
from src.trivia.triviaRepositories.millionaire.millionaireTriviaQuestionStorageInterface import \
    MillionaireTriviaQuestionStorageInterface
from src.trivia.triviaRepositories.millionaireTriviaQuestionRepository import MillionaireTriviaQuestionRepository
from src.trivia.triviaRepositories.openTriviaDatabase.openTriviaDatabaseApiService import OpenTriviaDatabaseApiService
from src.trivia.triviaRepositories.openTriviaDatabase.openTriviaDatabaseApiServiceInterface import \
    OpenTriviaDatabaseApiServiceInterface
from src.trivia.triviaRepositories.openTriviaDatabase.openTriviaDatabaseJsonParser import OpenTriviaDatabaseJsonParser
from src.trivia.triviaRepositories.openTriviaDatabase.openTriviaDatabaseJsonParserInterface import \
    OpenTriviaDatabaseJsonParserInterface
from src.trivia.triviaRepositories.openTriviaDatabase.openTriviaDatabaseQuestionFetcher import \
    OpenTriviaDatabaseQuestionFetcher
from src.trivia.triviaRepositories.openTriviaDatabase.openTriviaDatabaseQuestionFetcherInterface import \
    OpenTriviaDatabaseQuestionFetcherInterface
from src.trivia.triviaRepositories.openTriviaDatabase.openTriviaDatabaseSessionTokenRepository import \
    OpenTriviaDatabaseSessionTokenRepository
from src.trivia.triviaRepositories.openTriviaDatabase.openTriviaDatabaseSessionTokenRepositoryInterface import \
    OpenTriviaDatabaseSessionTokenRepositoryInterface
from src.trivia.triviaRepositories.openTriviaDatabaseTriviaQuestionRepository import \
    OpenTriviaDatabaseTriviaQuestionRepository
from src.trivia.triviaRepositories.openTriviaQa.openTriviaQaQuestionStorage import OpenTriviaQaQuestionStorage
from src.trivia.triviaRepositories.openTriviaQa.openTriviaQaQuestionStorageInterface import \
    OpenTriviaQaQuestionStorageInterface
from src.trivia.triviaRepositories.openTriviaQa.openTriviaQaQuestionTypeParser import OpenTriviaQaQuestionTypeParser
from src.trivia.triviaRepositories.openTriviaQa.openTriviaQaQuestionTypeParserInterface import \
    OpenTriviaQaQuestionTypeParserInterface
from src.trivia.triviaRepositories.openTriviaQaTriviaQuestionRepository import OpenTriviaQaTriviaQuestionRepository
from src.trivia.triviaRepositories.pkmnTriviaQuestionRepository import PkmnTriviaQuestionRepository
from src.trivia.triviaRepositories.pokepedia.pokepediaTriviaQuestionGenerator import PokepediaTriviaQuestionGenerator
from src.trivia.triviaRepositories.pokepedia.pokepediaTriviaQuestionGeneratorInterface import \
    PokepediaTriviaQuestionGeneratorInterface
from src.trivia.triviaRepositories.quizApiTriviaQuestionRepository import QuizApiTriviaQuestionRepository
from src.trivia.triviaRepositories.triviaDatabase.triviaDatabaseQuestionStorage import TriviaDatabaseQuestionStorage
from src.trivia.triviaRepositories.triviaDatabase.triviaDatabaseQuestionStorageInterface import \
    TriviaDatabaseQuestionStorageInterface
from src.trivia.triviaRepositories.triviaDatabaseTriviaQuestionRepository import TriviaDatabaseTriviaQuestionRepository
from src.trivia.triviaRepositories.triviaQuestionCompanyTriviaQuestionRepository import \
    TriviaQuestionCompanyTriviaQuestionRepository
from src.trivia.triviaRepositories.triviaRepository import TriviaRepository
from src.trivia.triviaRepositories.triviaRepositoryInterface import TriviaRepositoryInterface
from src.trivia.triviaRepositories.willFry.willFryTriviaApiService import WillFryTriviaApiService
from src.trivia.triviaRepositories.willFry.willFryTriviaApiServiceInterface import WillFryTriviaApiServiceInterface
from src.trivia.triviaRepositories.willFry.willFryTriviaJsonParser import WillFryTriviaJsonParser
from src.trivia.triviaRepositories.willFry.willFryTriviaJsonParserInterface import WillFryTriviaJsonParserInterface
from src.trivia.triviaRepositories.willFryTriviaQuestionRepository import WillFryTriviaQuestionRepository
from src.trivia.triviaRepositories.wwtbamTriviaQuestionRepository import WwtbamTriviaQuestionRepository
from src.trivia.triviaSourceInstabilityHelper import TriviaSourceInstabilityHelper
from src.trivia.triviaUtils import TriviaUtils
from src.trivia.triviaUtilsInterface import TriviaUtilsInterface
from src.trivia.triviaVerifier import TriviaVerifier
from src.trivia.triviaVerifierInterface import TriviaVerifierInterface
from src.trollmoji.trollmojiHelper import TrollmojiHelper
from src.trollmoji.trollmojiHelperInterface import TrollmojiHelperInterface
from src.trollmoji.trollmojiSettingsRepository import TrollmojiSettingsRepository
from src.trollmoji.trollmojiSettingsRepositoryInterface import TrollmojiSettingsRepositoryInterface
from src.tts.commandBuilder.ttsCommandBuilder import TtsCommandBuilder
from src.tts.commandBuilder.ttsCommandBuilderInterface import TtsCommandBuilderInterface
from src.tts.commodoreSam.commodoreSamTtsManagerProvider import CommodoreSamTtsManagerProvider
from src.tts.commodoreSam.commodoreSamTtsManagerProviderInterface import CommodoreSamTtsManagerProviderInterface
from src.tts.decTalk.decTalkTtsManagerProvider import DecTalkTtsManagerProvider
from src.tts.decTalk.decTalkTtsManagerProviderInterface import DecTalkTtsManagerProviderInterface
from src.tts.decTalk.unrestrictedDecTalkTtsManagerProvider import UnrestrictedDecTalkTtsManagerProvider
from src.tts.directoryProvider.ttsDirectoryProvider import TtsDirectoryProvider
from src.tts.directoryProvider.ttsDirectoryProviderInterface import TtsDirectoryProviderInterface
from src.tts.google.googleTtsManagerProvider import GoogleTtsManagerProvider
from src.tts.google.googleTtsManagerProviderInterface import GoogleTtsManagerProviderInterface
from src.tts.halfLife.halfLifeTtsManagerProvider import HalfLifeTtsManagerProvider
from src.tts.halfLife.halfLifeTtsManagerProviderInterface import HalfLifeTtsManagerProviderInterface
from src.tts.jsonMapper.ttsJsonMapper import TtsJsonMapper
from src.tts.jsonMapper.ttsJsonMapperInterface import TtsJsonMapperInterface
from src.tts.microsoft.microsoftTtsManagerProvider import MicrosoftTtsManagerProvider
from src.tts.microsoft.microsoftTtsManagerProviderInterface import MicrosoftTtsManagerProviderInterface
from src.tts.microsoftSam.microsoftSamTtsManagerProvider import MicrosoftSamTtsManagerProvider
from src.tts.microsoftSam.microsoftSamTtsManagerProviderInterface import MicrosoftSamTtsManagerProviderInterface
from src.tts.provider.compositeTtsManagerProvider import CompositeTtsManagerProvider
from src.tts.provider.compositeTtsManagerProviderInterface import CompositeTtsManagerProviderInterface
from src.tts.settings.ttsSettingsRepository import TtsSettingsRepository
from src.tts.settings.ttsSettingsRepositoryInterface import TtsSettingsRepositoryInterface
from src.tts.streamElements.streamElementsTtsManagerProvider import StreamElementsTtsManagerProvider
from src.tts.streamElements.streamElementsTtsManagerProviderInterface import StreamElementsTtsManagerProviderInterface
from src.tts.ttsMonster.ttsMonsterTtsManagerProvider import TtsMonsterTtsManagerProvider
from src.tts.ttsMonster.ttsMonsterTtsManagerProviderInterface import TtsMonsterTtsManagerProviderInterface
from src.ttsChatter.repository.ttsChatterRepository import TtsChatterRepository
from src.ttsChatter.repository.ttsChatterRepositoryInterface import TtsChatterRepositoryInterface
from src.ttsChatter.settings.ttsChatterSettingsRepository import TtsChatterSettingsRepository
from src.ttsChatter.settings.ttsChatterSettingsRepositoryInterface import TtsChatterSettingsRepositoryInterface
from src.ttsMonster.apiService.ttsMonsterPrivateApiService import TtsMonsterPrivateApiService
from src.ttsMonster.apiService.ttsMonsterPrivateApiServiceInterface import TtsMonsterPrivateApiServiceInterface
from src.ttsMonster.helpers.ttsMonsterHelper import TtsMonsterHelper
from src.ttsMonster.helpers.ttsMonsterHelperInterface import TtsMonsterHelperInterface
from src.ttsMonster.helpers.ttsMonsterPrivateApiHelper import TtsMonsterPrivateApiHelper
from src.ttsMonster.helpers.ttsMonsterPrivateApiHelperInterface import TtsMonsterPrivateApiHelperInterface
from src.ttsMonster.mapper.ttsMonsterPrivateApiJsonMapper import TtsMonsterPrivateApiJsonMapper
from src.ttsMonster.mapper.ttsMonsterPrivateApiJsonMapperInterface import TtsMonsterPrivateApiJsonMapperInterface
from src.ttsMonster.messageChunkParser.ttsMonsterMessageChunkParser import TtsMonsterMessageChunkParser
from src.ttsMonster.messageChunkParser.ttsMonsterMessageChunkParserInterface import \
    TtsMonsterMessageChunkParserInterface
from src.ttsMonster.settings.ttsMonsterSettingsRepository import TtsMonsterSettingsRepository
from src.ttsMonster.settings.ttsMonsterSettingsRepositoryInterface import TtsMonsterSettingsRepositoryInterface
from src.ttsMonster.tokens.ttsMonsterTokensRepository import TtsMonsterTokensRepository
from src.ttsMonster.tokens.ttsMonsterTokensRepositoryInterface import \
    TtsMonsterTokensRepositoryInterface
from src.ttsMonster.ttsMonsterMessageCleaner import TtsMonsterMessageCleaner
from src.ttsMonster.ttsMonsterMessageCleanerInterface import TtsMonsterMessageCleanerInterface
from src.twitch.absTwitchChannelPointRedemptionHandler import AbsTwitchChannelPointRedemptionHandler
from src.twitch.absTwitchChatHandler import AbsTwitchChatHandler
from src.twitch.absTwitchCheerHandler import AbsTwitchCheerHandler
from src.twitch.absTwitchFollowHandler import AbsTwitchFollowHandler
from src.twitch.absTwitchHypeTrainHandler import AbsTwitchHypeTrainHandler
from src.twitch.absTwitchPollHandler import AbsTwitchPollHandler
from src.twitch.absTwitchPredictionHandler import AbsTwitchPredictionHandler
from src.twitch.absTwitchRaidHandler import AbsTwitchRaidHandler
from src.twitch.absTwitchSubscriptionHandler import AbsTwitchSubscriptionHandler
from src.twitch.activeChatters.activeChattersRepository import ActiveChattersRepository
from src.twitch.activeChatters.activeChattersRepositoryInterface import ActiveChattersRepositoryInterface
from src.twitch.api.jsonMapper.twitchJsonMapper import TwitchJsonMapper
from src.twitch.api.jsonMapper.twitchJsonMapperInterface import TwitchJsonMapperInterface
from src.twitch.api.twitchApiService import TwitchApiService
from src.twitch.api.twitchApiServiceInterface import TwitchApiServiceInterface
from src.twitch.channelEditors.twitchChannelEditorsRepository import TwitchChannelEditorsRepository
from src.twitch.channelEditors.twitchChannelEditorsRepositoryInterface import TwitchChannelEditorsRepositoryInterface
from src.twitch.chatMessenger.twitchChatMessenger import TwitchChatMessenger
from src.twitch.chatMessenger.twitchChatMessengerInterface import TwitchChatMessengerInterface
from src.twitch.configuration.twitchChannelJoinHelper import TwitchChannelJoinHelper
from src.twitch.configuration.twitchChannelPointRedemptionHandler import TwitchChannelPointRedemptionHandler
from src.twitch.configuration.twitchChatHandler import TwitchChatHandler
from src.twitch.configuration.twitchCheerHandler import TwitchCheerHandler
from src.twitch.configuration.twitchConfiguration import TwitchConfiguration
from src.twitch.configuration.twitchFollowHandler import TwitchFollowHandler
from src.twitch.configuration.twitchHypeTrainHandler import TwitchHypeTrainHandler
from src.twitch.configuration.twitchIo.twitchIoConfiguration import TwitchIoConfiguration
from src.twitch.configuration.twitchPollHandler import TwitchPollHandler
from src.twitch.configuration.twitchPredictionHandler import TwitchPredictionHandler
from src.twitch.configuration.twitchRaidHandler import TwitchRaidHandler
from src.twitch.configuration.twitchSubscriptionHandler import TwitchSubscriptionHandler
from src.twitch.emotes.twitchEmotesHelper import TwitchEmotesHelper
from src.twitch.emotes.twitchEmotesHelperInterface import TwitchEmotesHelperInterface
from src.twitch.followingStatus.twitchFollowingStatusRepository import TwitchFollowingStatusRepository
from src.twitch.followingStatus.twitchFollowingStatusRepositoryInterface import \
    TwitchFollowingStatusRepositoryInterface
from src.twitch.friends.twitchFriendsUserIdRepository import TwitchFriendsUserIdRepository
from src.twitch.friends.twitchFriendsUserIdRepositoryInterface import TwitchFriendsUserIdRepositoryInterface
from src.twitch.globalTwitchConstants import GlobalTwitchConstants
from src.twitch.ircTagsParser.twitchIrcTagsParser import TwitchIrcTagsParser
from src.twitch.ircTagsParser.twitchIrcTagsParserInterface import TwitchIrcTagsParserInterface
from src.twitch.isLive.isLiveOnTwitchRepository import IsLiveOnTwitchRepository
from src.twitch.isLive.isLiveOnTwitchRepositoryInterface import IsLiveOnTwitchRepositoryInterface
from src.twitch.officialAccounts.officialTwitchAccountUserIdProvider import OfficialTwitchAccountUserIdProvider
from src.twitch.officialAccounts.officialTwitchAccountUserIdProviderInterface import \
    OfficialTwitchAccountUserIdProviderInterface
from src.twitch.subscribers.twitchSubscriptionsRepository import TwitchSubscriptionsRepository
from src.twitch.subscribers.twitchSubscriptionsRepositoryInterface import TwitchSubscriptionsRepositoryInterface
from src.twitch.timeout.timeoutImmuneUserIdsRepository import TimeoutImmuneUserIdsRepository
from src.twitch.timeout.timeoutImmuneUserIdsRepositoryInterface import TimeoutImmuneUserIdsRepositoryInterface
from src.twitch.timeout.twitchTimeoutHelper import TwitchTimeoutHelper
from src.twitch.timeout.twitchTimeoutHelperInterface import TwitchTimeoutHelperInterface
from src.twitch.timeout.twitchTimeoutRemodHelper import TwitchTimeoutRemodHelper
from src.twitch.timeout.twitchTimeoutRemodHelperInterface import TwitchTimeoutRemodHelperInterface
from src.twitch.timeout.twitchTimeoutRemodRepository import TwitchTimeoutRemodRepository
from src.twitch.timeout.twitchTimeoutRemodRepositoryInterface import TwitchTimeoutRemodRepositoryInterface
from src.twitch.tokens.twitchTokensRepository import TwitchTokensRepository
from src.twitch.tokens.twitchTokensRepositoryInterface import TwitchTokensRepositoryInterface
from src.twitch.tokens.twitchTokensUtils import TwitchTokensUtils
from src.twitch.tokens.twitchTokensUtilsInterface import TwitchTokensUtilsInterface
from src.twitch.twitchChannelJoinHelperInterface import TwitchChannelJoinHelperInterface
from src.twitch.twitchMessageStringUtils import TwitchMessageStringUtils
from src.twitch.twitchMessageStringUtilsInterface import TwitchMessageStringUtilsInterface
from src.twitch.twitchPredictionWebsocketUtils import TwitchPredictionWebsocketUtils
from src.twitch.twitchPredictionWebsocketUtilsInterface import TwitchPredictionWebsocketUtilsInterface
from src.twitch.twitchUtils import TwitchUtils
from src.twitch.twitchUtilsInterface import TwitchUtilsInterface
from src.twitch.websocket.conditionBuilder.twitchWebsocketConditionBuilder import TwitchWebsocketConditionBuilder
from src.twitch.websocket.conditionBuilder.twitchWebsocketConditionBuilderInterface import \
    TwitchWebsocketConditionBuilderInterface
from src.twitch.websocket.connectionAction.twitchWebsocketConnectionActionHelper import \
    TwitchWebsocketConnectionActionHelper
from src.twitch.websocket.connectionAction.twitchWebsocketConnectionActionHelperInterface import \
    TwitchWebsocketConnectionActionHelperInterface
from src.twitch.websocket.endpointHelper.twitchWebsocketEndpointHelper import TwitchWebsocketEndpointHelper
from src.twitch.websocket.endpointHelper.twitchWebsocketEndpointHelperInterface import \
    TwitchWebsocketEndpointHelperInterface
from src.twitch.websocket.instabilityHelper.twitchWebsocketInstabilityHelper import TwitchWebsocketInstabilityHelper
from src.twitch.websocket.instabilityHelper.twitchWebsocketInstabilityHelperInterface import \
    TwitchWebsocketInstabilityHelperInterface
from src.twitch.websocket.sessionIdHelper.twitchWebsocketSessionIdHelper import TwitchWebsocketSessionIdHelper
from src.twitch.websocket.sessionIdHelper.twitchWebsocketSessionIdHelperInterface import \
    TwitchWebsocketSessionIdHelperInterface
from src.twitch.websocket.settings.twitchWebsocketSettingsRepository import TwitchWebsocketSettingsRepository
from src.twitch.websocket.settings.twitchWebsocketSettingsRepositoryInterface import \
    TwitchWebsocketSettingsRepositoryInterface
from src.twitch.websocket.subscriptionHelper.twitchWebsocketSubscriptionHelper import TwitchWebsocketSubscriptionHelper
from src.twitch.websocket.subscriptionHelper.twitchWebsocketSubscriptionHelperInterface import \
    TwitchWebsocketSubscriptionHelperInterface
from src.twitch.websocket.twitchWebsocketAllowedUsersRepository import TwitchWebsocketAllowedUsersRepository
from src.twitch.websocket.twitchWebsocketAllowedUsersRepositoryInterface import \
    TwitchWebsocketAllowedUsersRepositoryInterface
from src.twitch.websocket.twitchWebsocketClient import TwitchWebsocketClient
from src.twitch.websocket.twitchWebsocketClientInterface import TwitchWebsocketClientInterface
from src.twitch.websocket.twitchWebsocketJsonMapper import TwitchWebsocketJsonMapper
from src.twitch.websocket.twitchWebsocketJsonMapperInterface import TwitchWebsocketJsonMapperInterface
from src.users.addOrRemoveUserDataHelper import AddOrRemoveUserDataHelper
from src.users.addOrRemoveUserDataHelperInterface import AddOrRemoveUserDataHelperInterface
from src.users.chatSoundAlert.chatSoundAlertJsonParser import ChatSoundAlertJsonParser
from src.users.chatSoundAlert.chatSoundAlertJsonParserInterface import ChatSoundAlertJsonParserInterface
from src.users.crowdControl.crowdControlJsonParser import CrowdControlJsonParser
from src.users.crowdControl.crowdControlJsonParserInterface import CrowdControlJsonParserInterface
from src.users.cuteness.cutenessBoosterPackJsonParser import CutenessBoosterPackJsonParser
from src.users.cuteness.cutenessBoosterPackJsonParserInterface import CutenessBoosterPackJsonParserInterface
from src.users.decTalkSongs.decTalkSongBoosterPackParser import DecTalkSongBoosterPackParser
from src.users.decTalkSongs.decTalkSongBoosterPackParserInterface import DecTalkSongBoosterPackParserInterface
from src.users.pkmn.pkmnBoosterPackJsonParser import PkmnBoosterPackJsonParser
from src.users.pkmn.pkmnBoosterPackJsonParserInterface import PkmnBoosterPackJsonParserInterface
from src.users.redemptionCounter.redemptionCounterBoosterPackParser import RedemptionCounterBoosterPackParser
from src.users.redemptionCounter.redemptionCounterBoosterPackParserInterface import \
    RedemptionCounterBoosterPackParserInterface
from src.users.soundAlert.soundAlertRedemptionJsonParser import SoundAlertRedemptionJsonParser
from src.users.soundAlert.soundAlertRedemptionJsonParserInterface import SoundAlertRedemptionJsonParserInterface
from src.users.supStreamer.supStreamerBoosterPackJsonParser import SupStreamerBoosterPackJsonParser
from src.users.supStreamer.supStreamerBoosterPackJsonParserInterface import SupStreamerBoosterPackJsonParserInterface
from src.users.timeout.timeoutBoosterPackJsonParser import TimeoutBoosterPackJsonParser
from src.users.timeout.timeoutBoosterPackJsonParserInterface import TimeoutBoosterPackJsonParserInterface
from src.users.tts.ttsBoosterPackParser import TtsBoosterPackParser
from src.users.tts.ttsBoosterPackParserInterface import TtsBoosterPackParserInterface
from src.users.userIdsRepository import UserIdsRepository
from src.users.userIdsRepositoryInterface import UserIdsRepositoryInterface
from src.users.usersRepository import UsersRepository
from src.users.usersRepositoryInterface import UsersRepositoryInterface
from src.voicemail.helpers.voicemailHelper import VoicemailHelper
from src.voicemail.helpers.voicemailHelperInterface import VoicemailHelperInterface
from src.voicemail.idGenerator.voicemailIdGenerator import VoicemailIdGenerator
from src.voicemail.idGenerator.voicemailIdGeneratorInterface import VoicemailIdGeneratorInterface
from src.voicemail.repositories.voicemailsRepository import VoicemailsRepository
from src.voicemail.repositories.voicemailsRepositoryInterface import VoicemailsRepositoryInterface
from src.voicemail.settings.voicemailSettingsRepository import VoicemailSettingsRepository
from src.voicemail.settings.voicemailSettingsRepositoryInterface import VoicemailSettingsRepositoryInterface
from src.weather.weatherReportPresenter import WeatherReportPresenter
from src.weather.weatherReportPresenterInterface import WeatherReportPresenterInterface
from src.weather.weatherRepository import WeatherRepository
from src.weather.weatherRepositoryInterface import WeatherRepositoryInterface
from src.websocketConnection.mapper.websocketEventTypeMapper import WebsocketEventTypeMapper
from src.websocketConnection.mapper.websocketEventTypeMapperInterface import WebsocketEventTypeMapperInterface
from src.websocketConnection.settings.websocketConnectionServerSettings import WebsocketConnectionServerSettings
from src.websocketConnection.settings.websocketConnectionServerSettingsInterface import \
    WebsocketConnectionServerSettingsInterface
from src.websocketConnection.websocketConnectionServer import WebsocketConnectionServer
from src.websocketConnection.websocketConnectionServerInterface import WebsocketConnectionServerInterface

locale.setlocale(locale.LC_ALL, 'en_US.utf8')


#################################
## Core initialization section ##
#################################

eventLoop: AbstractEventLoop = asyncio.new_event_loop()
asyncio.set_event_loop(eventLoop)

backgroundTaskHelper: BackgroundTaskHelperInterface = BackgroundTaskHelper(
    eventLoop = eventLoop,
)

timeZoneRepository: TimeZoneRepositoryInterface = TimeZoneRepository()

timber: TimberInterface = Timber(
    backgroundTaskHelper = backgroundTaskHelper,
    timeZoneRepository = timeZoneRepository,
)

networkJsonMapper: NetworkJsonMapperInterface = NetworkJsonMapper()

soundPlayerJsonMapper: SoundPlayerJsonMapperInterface = SoundPlayerJsonMapper()

storageJsonMapper: StorageJsonMapperInterface = StorageJsonMapper()

generalSettingsRepository = GeneralSettingsRepository(
    settingsJsonReader = JsonFileReader(
        eventLoop = eventLoop,
        fileName = '../config/generalSettingsRepository.json',
    ),
    networkJsonMapper = networkJsonMapper,
    soundPlayerJsonMapper = soundPlayerJsonMapper,
    storageJsonMapper = storageJsonMapper,
)

generalSettingsSnapshot = generalSettingsRepository.getAll()

backingDatabase: BackingDatabase
psqlCredentialsProvider: PsqlCredentialsProviderInterface | None = None
match generalSettingsSnapshot.requireDatabaseType():
    case DatabaseType.POSTGRESQL:
        psqlCredentialsProvider = PsqlCredentialsProvider(
            credentialsJsonReader = JsonFileReader(
                eventLoop = eventLoop,
                fileName = '../config/psqlCredentials.json',
            ),
        )

        backingDatabase = PsqlBackingDatabase(
            eventLoop = eventLoop,
            psqlCredentialsProvider = psqlCredentialsProvider,
            timber = timber,
        )

    case DatabaseType.SQLITE:
        backingDatabase = SqliteBackingDatabase(
            eventLoop = eventLoop,
        )

    case _:
        raise RuntimeError(f'Unknown/misconfigured DatabaseType: \"{generalSettingsSnapshot.requireDatabaseType()}\"')

aioHttpCookieJarProvider = AioHttpCookieJarProvider(
    eventLoop = eventLoop,
)

networkClientProvider: NetworkClientProvider = AioHttpClientProvider(
    eventLoop = eventLoop,
    cookieJarProvider = aioHttpCookieJarProvider,
    timber = timber,
)

authRepository = AuthRepository(
    authJsonReader = JsonFileReader(
        eventLoop = eventLoop,
        fileName = '../config/authRepository.json',
    ),
)

twitchJsonMapper: TwitchJsonMapperInterface = TwitchJsonMapper(
    timber = timber,
    timeZoneRepository = timeZoneRepository
)

twitchWebsocketJsonMapper: TwitchWebsocketJsonMapperInterface = TwitchWebsocketJsonMapper(
    timber = timber,
    twitchJsonMapper = twitchJsonMapper
)

twitchApiService: TwitchApiServiceInterface = TwitchApiService(
    networkClientProvider = networkClientProvider,
    timber = timber,
    timeZoneRepository = timeZoneRepository,
    twitchCredentialsProvider = authRepository,
    twitchJsonMapper = twitchJsonMapper
)

userIdsRepository: UserIdsRepositoryInterface = UserIdsRepository(
    backingDatabase = backingDatabase,
    timber = timber,
    twitchApiService = twitchApiService,
)

twitchTokensRepository: TwitchTokensRepositoryInterface = TwitchTokensRepository(
    backgroundTaskHelper = backgroundTaskHelper,
    backingDatabase = backingDatabase,
    timber = timber,
    timeZoneRepository = timeZoneRepository,
    twitchApiService = twitchApiService,
    userIdsRepository = userIdsRepository,
    seedFileReader = JsonFileReader(
        eventLoop = eventLoop,
        fileName = '../config/twitchTokensRepositorySeedFile.json',
    ),
)

administratorProvider: AdministratorProviderInterface = AdministratorProvider(
    generalSettingsRepository = generalSettingsRepository,
    twitchTokensRepository = twitchTokensRepository,
    userIdsRepository = userIdsRepository
)

bannedWordsRepository: BannedWordsRepositoryInterface = BannedWordsRepository(
    bannedWordsLinesReader = LinesFileReader(
        eventLoop = eventLoop,
        fileName = 'bannedWords.txt'
    ),
    timber = timber
)

contentScanner: ContentScannerInterface = ContentScanner(
    bannedWordsRepository = bannedWordsRepository,
    timber = timber
)

twitchTokensUtils: TwitchTokensUtilsInterface = TwitchTokensUtils(
    administratorProvider = administratorProvider,
    twitchTokensRepository = twitchTokensRepository
)

twitchSubscriptionsRepository: TwitchSubscriptionsRepositoryInterface = TwitchSubscriptionsRepository(
    timber = timber,
    timeZoneRepository = timeZoneRepository,
    twitchApiService = twitchApiService
)

twitchEmotesHelper: TwitchEmotesHelperInterface = TwitchEmotesHelper(
    timber = timber,
    timeZoneRepository = timeZoneRepository,
    twitchApiService = twitchApiService,
    twitchHandleProvider = authRepository,
    twitchSubscriptionsRepository = twitchSubscriptionsRepository,
    twitchTokensRepository = twitchTokensRepository,
    userIdsRepository = userIdsRepository
)

twitchFollowingStatusRepository: TwitchFollowingStatusRepositoryInterface = TwitchFollowingStatusRepository(
    backingDatabase = backingDatabase,
    timber = timber,
    twitchApiService = twitchApiService,
    userIdsRepository = userIdsRepository
)

anivJsonMapper: AnivJsonMapperInterface = AnivJsonMapper()

soundAlertJsonMapper: SoundAlertJsonMapperInterface = SoundAlertJsonMapper()

chatSoundAlertJsonParser: ChatSoundAlertJsonParserInterface = ChatSoundAlertJsonParser(
    soundAlertJsonMapper = soundAlertJsonMapper
)

crowdControlJsonParser: CrowdControlJsonParserInterface = CrowdControlJsonParser()

cutenessBoosterPackJsonParser: CutenessBoosterPackJsonParserInterface = CutenessBoosterPackJsonParser()

decTalkSongBoosterPackParser: DecTalkSongBoosterPackParserInterface = DecTalkSongBoosterPackParser()

languageEntryJsonMapper: LanguageEntryJsonMapperInterface = LanguageEntryJsonMapper()

pkmnBoosterPackJsonParser: PkmnBoosterPackJsonParserInterface = PkmnBoosterPackJsonParser(
    timber = timber
)

redemptionCounterBoosterPackParser: RedemptionCounterBoosterPackParserInterface = RedemptionCounterBoosterPackParser()

soundAlertRedemptionJsonParser: SoundAlertRedemptionJsonParserInterface = SoundAlertRedemptionJsonParser(
    soundAlertJsonMapper = soundAlertJsonMapper
)

supStreamerBoosterPackJsonParser: SupStreamerBoosterPackJsonParserInterface = SupStreamerBoosterPackJsonParser()

timeoutBoosterPackJsonParser: TimeoutBoosterPackJsonParserInterface = TimeoutBoosterPackJsonParser()

ttsJsonMapper: TtsJsonMapperInterface = TtsJsonMapper(
    timber = timber
)

ttsBoosterPackParser: TtsBoosterPackParserInterface = TtsBoosterPackParser(
    ttsJsonMapper = ttsJsonMapper
)

usersRepository: UsersRepositoryInterface = UsersRepository(
    anivJsonMapper = anivJsonMapper,
    chatSoundAlertJsonParser = chatSoundAlertJsonParser,
    crowdControlJsonParser = crowdControlJsonParser,
    cutenessBoosterPackJsonParser = cutenessBoosterPackJsonParser,
    decTalkSongBoosterPackParser = decTalkSongBoosterPackParser,
    languageEntryJsonMapper = languageEntryJsonMapper,
    pkmnBoosterPackJsonParser = pkmnBoosterPackJsonParser,
    redemptionCounterBoosterPackParser = redemptionCounterBoosterPackParser,
    soundAlertRedemptionJsonParser = soundAlertRedemptionJsonParser,
    supStreamerBoosterPackJsonParser = supStreamerBoosterPackJsonParser,
    timber = timber,
    timeoutBoosterPackJsonParser = timeoutBoosterPackJsonParser,
    timeZoneRepository = timeZoneRepository,
    ttsBoosterPackParser = ttsBoosterPackParser,
    ttsJsonMapper = ttsJsonMapper,
)

twitchChannelJoinHelper: TwitchChannelJoinHelperInterface = TwitchChannelJoinHelper(
    backgroundTaskHelper = backgroundTaskHelper,
    verified = True,
    timber = timber,
    usersRepository = usersRepository
)

twitchPredictionWebsocketUtils: TwitchPredictionWebsocketUtilsInterface = TwitchPredictionWebsocketUtils(
    timber = timber,
)

addOrRemoveUserDataHelper: AddOrRemoveUserDataHelperInterface = AddOrRemoveUserDataHelper(
    timber = timber,
    timeZoneRepository = timeZoneRepository
)

chatLogger: ChatLoggerInterface = ChatLogger(
    backgroundTaskHelper = backgroundTaskHelper,
    timber = timber,
    timeZoneRepository = timeZoneRepository,
)

activeChattersRepository: ActiveChattersRepositoryInterface = ActiveChattersRepository(
    timber = timber,
    timeZoneRepository = timeZoneRepository,
    twitchApiService = twitchApiService,
    twitchHandleProvider = authRepository,
    twitchTokensRepository = twitchTokensRepository,
    userIdsRepository = userIdsRepository
)


#####################################
## Cuteness initialization section ##
#####################################

cutenessPresenter: CutenessPresenterInterface = CutenessPresenter()

cutenessRepository: CutenessRepositoryInterface = CutenessRepository(
    backingDatabase = backingDatabase,
    userIdsRepository = userIdsRepository
)

cutenessUtils: CutenessUtilsInterface = CutenessUtils()


####################################
## Funtoon initialization section ##
####################################

funtoonUserIdProvider: FuntoonUserIdProviderInterface = FuntoonUserIdProvider()

funtoonTokensRepository: FuntoonTokensRepositoryInterface = FuntoonTokensRepository(
    backingDatabase = backingDatabase,
    timber = timber,
    userIdsRepository = userIdsRepository,
    seedFileReader = JsonFileReader(
        eventLoop = eventLoop,
        fileName = '../config/funtoonTokensRepositorySeedFile.json'
    )
)

funtoonJsonMapper: FuntoonJsonMapperInterface = FuntoonJsonMapper()

funtoonApiService: FuntoonApiServiceInterface = FuntoonApiService(
    funtoonJsonMapper = funtoonJsonMapper,
    networkClientProvider = networkClientProvider,
    timber = timber
)

funtoonHelper: FuntoonHelperInterface = FuntoonHelper(
    funtoonApiService = funtoonApiService,
    funtoonJsonMapper = funtoonJsonMapper,
    funtoonTokensRepository = funtoonTokensRepository,
    timber = timber,
)

emojiRepository: EmojiRepositoryInterface = EmojiRepository(
    emojiJsonReader = JsonFileReader(
        eventLoop = eventLoop,
        fileName = 'emojiRepository.json'
    ),
    timber = timber
)

emojiHelper: EmojiHelperInterface = EmojiHelper(
    emojiRepository = emojiRepository
)

twitchChannelEditorsRepository: TwitchChannelEditorsRepositoryInterface = TwitchChannelEditorsRepository(
    timber = timber,
    timeZoneRepository = timeZoneRepository,
    twitchApiService = twitchApiService,
    twitchTokensRepository = twitchTokensRepository
)

languagesRepository: LanguagesRepositoryInterface = LanguagesRepository()

locationsRepository: LocationsRepositoryInterface = LocationsRepository(
    locationsJsonReader = JsonFileReader(
        eventLoop = eventLoop,
        fileName = 'locationsRepository.json'
    ),
    timber = timber,
    timeZoneRepository = timeZoneRepository
)

mostRecentChatsRepository: MostRecentChatsRepositoryInterface = MostRecentChatsRepository(
    backingDatabase = backingDatabase,
    timber = timber,
    timeZoneRepository = timeZoneRepository
)

pokepediaJsonMapper: PokepediaJsonMapperInterface = PokepediaJsonMapper(
    timber = timber
)

pokepediaRepository: PokepediaRepositoryInterface = PokepediaRepository(
    networkClientProvider = networkClientProvider,
    pokepediaJsonMapper = pokepediaJsonMapper,
    timber = timber
)

twitchIrcTagsParser: TwitchIrcTagsParserInterface = TwitchIrcTagsParser()

twitchConfiguration: TwitchConfiguration = TwitchIoConfiguration(
    twitchIrcTagsParser = twitchIrcTagsParser,
    userIdsRepository = userIdsRepository
)

sentMessageLogger: SentMessageLoggerInterface = SentMessageLogger(
    backgroundTaskHelper = backgroundTaskHelper,
    timber = timber,
    timeZoneRepository = timeZoneRepository
)

twitchTimeoutRemodRepository: TwitchTimeoutRemodRepositoryInterface = TwitchTimeoutRemodRepository(
    backingDatabase = backingDatabase,
    timber = timber,
    timeZoneRepository = timeZoneRepository
)

twitchTimeoutRemodHelper: TwitchTimeoutRemodHelperInterface = TwitchTimeoutRemodHelper(
    backgroundTaskHelper = backgroundTaskHelper,
    timber = timber,
    timeZoneRepository = timeZoneRepository,
    twitchApiService = twitchApiService,
    twitchTimeoutRemodRepository = twitchTimeoutRemodRepository,
    twitchTokensRepository = twitchTokensRepository,
    userIdsRepository = userIdsRepository,
)

twitchMessageStringUtils: TwitchMessageStringUtilsInterface = TwitchMessageStringUtils()

twitchUtils: TwitchUtilsInterface = TwitchUtils(
    backgroundTaskHelper = backgroundTaskHelper,
    sentMessageLogger = sentMessageLogger,
    timber = timber,
    timeZoneRepository = timeZoneRepository,
    twitchApiService = twitchApiService,
    twitchHandleProvider = authRepository,
    twitchTokensRepository = twitchTokensRepository,
    userIdsRepository = userIdsRepository
)

globalTwitchConstants = GlobalTwitchConstants()

twitchChatMessenger: TwitchChatMessengerInterface = TwitchChatMessenger(
    backgroundTaskHelper = backgroundTaskHelper,
    globalTwitchConstants = globalTwitchConstants,
    sentMessageLogger = sentMessageLogger,
    timber = timber,
    timeZoneRepository = timeZoneRepository,
    twitchApiService = twitchApiService,
    twitchHandleProvider = authRepository,
    twitchTokensRepository = twitchTokensRepository,
    userIdsRepository = userIdsRepository,
)

cynanBotUserIdsProvider: CynanBotUserIdsProviderInterface = CynanBotUserIdsProvider()

officialTwitchAccountUserIdProvider: OfficialTwitchAccountUserIdProviderInterface = OfficialTwitchAccountUserIdProvider()

twitchFriendsUserIdRepository: TwitchFriendsUserIdRepositoryInterface = TwitchFriendsUserIdRepository()

timeoutImmuneUserIdsRepository: TimeoutImmuneUserIdsRepositoryInterface = TimeoutImmuneUserIdsRepository(
    cynanBotUserIdsProvider = cynanBotUserIdsProvider,
    funtoonUserIdProvider = funtoonUserIdProvider,
    officialTwitchAccountUserIdProvider = officialTwitchAccountUserIdProvider,
    timber = timber,
    twitchFriendsUserIdProvider = twitchFriendsUserIdRepository,
    twitchHandleProvider = authRepository,
    userIdsRepository = userIdsRepository,
    otherImmuneUserIdsLinesReader = LinesFileReader(
        eventLoop = eventLoop,
        fileName = '../config/otherImmuneUserIds.txt',
    ),
)

transparentXmlMapper: TransparentXmlMapperInterface = TransparentXmlMapper(
    timeZoneRepository = timeZoneRepository
)

transparentApiService: TransparentApiServiceInterface = TransparentApiService(
    networkClientProvider = networkClientProvider,
    timber = timber,
    transparentXmlMapper = transparentXmlMapper
)

wordOfTheDayRepository: WordOfTheDayRepositoryInterface = WordOfTheDayRepository(
    timber = timber,
    transparentApiService = transparentApiService
)

wordOfTheDayPresenter: WordOfTheDayPresenterInterface = WordOfTheDayPresenter()

twitchWebsocketAllowedUsersRepository: TwitchWebsocketAllowedUsersRepositoryInterface = TwitchWebsocketAllowedUsersRepository(
    timber = timber,
    twitchTokensRepository = twitchTokensRepository,
    userIdsRepository = userIdsRepository,
    usersRepository = usersRepository
)

twitchWebsocketConditionBuilder: TwitchWebsocketConditionBuilderInterface = TwitchWebsocketConditionBuilder()

twitchWebsocketEndpointHelper: TwitchWebsocketEndpointHelperInterface = TwitchWebsocketEndpointHelper(
    timber = timber
)

twitchWebsocketInstabilityHelper: TwitchWebsocketInstabilityHelperInterface = TwitchWebsocketInstabilityHelper(
    timber = timber,
    timeZoneRepository = timeZoneRepository
)

twitchWebsocketSessionIdHelper: TwitchWebsocketSessionIdHelperInterface = TwitchWebsocketSessionIdHelper(
    timber = timber
)

twitchWebsocketConnectionActionHelper: TwitchWebsocketConnectionActionHelperInterface = TwitchWebsocketConnectionActionHelper(
    timber = timber,
    twitchWebsocketEndpointHelper = twitchWebsocketEndpointHelper,
    twitchWebsocketSessionIdHelper = twitchWebsocketSessionIdHelper
)

twitchWebsocketSettingsRepository: TwitchWebsocketSettingsRepositoryInterface = TwitchWebsocketSettingsRepository(
    settingsJsonReader = JsonFileReader(
        eventLoop = eventLoop,
        fileName = '../config/twitchWebsocketSettingsRepository.json'
    ),
    twitchJsonMapper = twitchJsonMapper,
    twitchWebsocketJsonMapper = twitchWebsocketJsonMapper,
)

twitchWebsocketSubscriptionHelper: TwitchWebsocketSubscriptionHelperInterface = TwitchWebsocketSubscriptionHelper(
    timber = timber,
    twitchApiService = twitchApiService,
    twitchTokensRepository = twitchTokensRepository,
    twitchWebsocketConditionBuilder = twitchWebsocketConditionBuilder,
    twitchWebsocketSessionIdHelper = twitchWebsocketSessionIdHelper,
    twitchWebsocketSettingsRepository = twitchWebsocketSettingsRepository,
)

twitchWebsocketClient: TwitchWebsocketClientInterface = TwitchWebsocketClient(
    backgroundTaskHelper = backgroundTaskHelper,
    timber = timber,
    timeZoneRepository = timeZoneRepository,
    twitchWebsocketAllowedUsersRepository = twitchWebsocketAllowedUsersRepository,
    twitchWebsocketConnectionActionHelper = twitchWebsocketConnectionActionHelper,
    twitchWebsocketEndpointHelper = twitchWebsocketEndpointHelper,
    twitchWebsocketInstabilityHelper = twitchWebsocketInstabilityHelper,
    twitchWebsocketJsonMapper = twitchWebsocketJsonMapper,
    twitchWebsocketSessionIdHelper = twitchWebsocketSessionIdHelper,
    twitchWebsocketSettingsRepository = twitchWebsocketSettingsRepository,
    twitchWebsocketSubscriptionHelper = twitchWebsocketSubscriptionHelper,
)


#########################################
## Sound Player initialization section ##
#########################################

soundPlayerSettingsRepository: SoundPlayerSettingsRepositoryInterface = SoundPlayerSettingsRepository(
    settingsJsonReader = JsonFileReader(
        eventLoop = eventLoop,
        fileName = '../config/soundPlayerSettingsRepository.json',
    ),
)

soundPlayerRandomizerHelper: SoundPlayerRandomizerHelperInterface = SoundPlayerRandomizerHelper(
    eventLoop = eventLoop,
    soundPlayerSettingsRepository = soundPlayerSettingsRepository,
    timber = timber,
)

soundPlayerManagerProvider: SoundPlayerManagerProviderInterface = SoundPlayerManagerProvider(
    backgroundTaskHelper = backgroundTaskHelper,
    generalSettingsRepository = generalSettingsRepository,
    soundPlayerSettingsRepository = soundPlayerSettingsRepository,
    timber = timber,
    timeZoneRepository = timeZoneRepository,
)


##################################################
## TTS mapper and parser initialization section ##
##################################################

decTalkVoiceMapper: DecTalkVoiceMapperInterface = DecTalkVoiceMapper()

halfLifeVoiceParser: HalfLifeVoiceParserInterface = HalfLifeVoiceParser()

microsoftSamJsonParser: MicrosoftSamJsonParserInterface = MicrosoftSamJsonParser()

microsoftTtsJsonParser: MicrosoftTtsJsonParserInterface = MicrosoftTtsJsonParser()

streamElementsJsonParser: StreamElementsJsonParserInterface = StreamElementsJsonParser()

ttsMonsterPrivateApiJsonMapper: TtsMonsterPrivateApiJsonMapperInterface = TtsMonsterPrivateApiJsonMapper(
    timber = timber,
)


##################################################
## Chatter Preferred TTS initialization section ##
##################################################

chatterPreferredTtsSettingsRepository: ChatterPreferredTtsSettingsRepositoryInterface = ChatterPreferredTtsSettingsRepository(
    settingsJsonReader = JsonFileReader(
        eventLoop = eventLoop,
        fileName = '../config/chatterPreferredTtsSettingsRepository.json',
    ),
    ttsJsonMapper = ttsJsonMapper,
)

chatterPreferredTtsJsonMapper: ChatterPreferredTtsJsonMapperInterface = ChatterPreferredTtsJsonMapper(
    decTalkVoiceMapper = decTalkVoiceMapper,
    halfLifeVoiceParser = halfLifeVoiceParser,
    languagesRepository = languagesRepository,
    microsoftTtsJsonParser = microsoftTtsJsonParser,
    microsoftSamJsonParser = microsoftSamJsonParser,
    streamElementsJsonParser = streamElementsJsonParser,
    ttsMonsterPrivateApiJsonMapper = ttsMonsterPrivateApiJsonMapper
)

chatterPreferredTtsRepository: ChatterPreferredTtsRepositoryInterface = ChatterPreferredTtsRepository(
    backingDatabase = backingDatabase,
    chatterPreferredTtsJsonMapper = chatterPreferredTtsJsonMapper,
    timber = timber,
    ttsJsonMapper = ttsJsonMapper
)

chatterPreferredTtsUserMessageHelper: ChatterPreferredTtsUserMessageHelperInterface = ChatterPreferredTtsUserMessageHelper(
    decTalkVoiceMapper = decTalkVoiceMapper,
    halfLifeVoiceParser = halfLifeVoiceParser,
    languagesRepository = languagesRepository,
    microsoftSamJsonParser = microsoftSamJsonParser,
    microsoftTtsJsonParser = microsoftTtsJsonParser,
    streamElementsJsonParser = streamElementsJsonParser,
    timber = timber,
    ttsMonsterPrivateApiJsonMapper = ttsMonsterPrivateApiJsonMapper
)

googleTtsVoicesHelper: GoogleTtsVoicesHelperInterface = GoogleTtsVoicesHelper()

chatterPreferredTtsHelper: ChatterPreferredTtsHelperInterface = ChatterPreferredTtsHelper(
    chatterPreferredTtsRepository = chatterPreferredTtsRepository,
    chatterPreferredTtsSettingsRepository = chatterPreferredTtsSettingsRepository,
    chatterPreferredTtsUserMessageHelper = chatterPreferredTtsUserMessageHelper,
    googleTtsVoicesHelper = googleTtsVoicesHelper,
    timber = timber
)

chatterPreferredTtsPresenter: ChatterPreferredTtsPresenter = ChatterPreferredTtsPresenter()


################################
## TTS initialization section ##
################################

ttsSettingsRepository: TtsSettingsRepositoryInterface = TtsSettingsRepository(
    settingsJsonReader = JsonFileReader(
        eventLoop = eventLoop,
        fileName = '../config/ttsSettingsRepository.json',
    ),
    ttsJsonMapper = ttsJsonMapper,
)

ttsCommandBuilder: TtsCommandBuilderInterface = TtsCommandBuilder()

ttsDirectoryProvider: TtsDirectoryProviderInterface = TtsDirectoryProvider()


########################################
## Glacial TTS initialization section ##
########################################

glacialTtsDataMapper: GlacialTtsDataMapperInterface = GlacialTtsDataMapper()

glacialTtsIdGenerator: GlacialTtsIdGeneratorInterface = GlacialTtsIdGenerator()

glacialTtsStorageRepository: GlacialTtsStorageRepositoryInterface = GlacialTtsStorageRepository(
    glacialTtsDataMapper = glacialTtsDataMapper,
    glacialTtsIdGenerator = glacialTtsIdGenerator,
    timber = timber,
    timeZoneRepository = timeZoneRepository
)

glacialTtsFileRetriever: GlacialTtsFileRetrieverInterface = GlacialTtsFileRetriever(
    eventLoop = eventLoop,
    glacialTtsStorageRepository = glacialTtsStorageRepository,
    timber = timber,
    ttsDirectoryProvider = ttsDirectoryProvider,
)


##############################################
## Commodore SAM TTS initialization section ##
##############################################

commodoreSamSettingsRepository: CommodoreSamSettingsRepositoryInterface = CommodoreSamSettingsRepository(
    settingsJsonReader = JsonFileReader(
        eventLoop = eventLoop,
        fileName = '../config/commodoreSamSettingsRepository.json',
    ),
)

commodoreSamApiService: CommodoreSamApiServiceInterface = CommodoreSamApiService(
    eventLoop = eventLoop,
    commodoreSamSettingsRepository = commodoreSamSettingsRepository,
    timber = timber,
    ttsDirectoryProvider = ttsDirectoryProvider,
)

commodoreSamHelper: CommodoreSamHelperInterface = CommodoreSamHelper(
    commodoreSamApiService = commodoreSamApiService,
    commodoreSamSettingsRepository = commodoreSamSettingsRepository,
    timber = timber,
    timeZoneRepository = timeZoneRepository,
)

commodoreSamMessageCleaner: CommodoreSamMessageCleanerInterface = CommodoreSamMessageCleaner(
    ttsSettingsRepository = ttsSettingsRepository,
    twitchMessageStringUtils = twitchMessageStringUtils,
)

commodoreSamTtsManagerProvider: CommodoreSamTtsManagerProviderInterface = CommodoreSamTtsManagerProvider(
    commodoreSamHelper = commodoreSamHelper,
    commodoreSamMessageCleaner = commodoreSamMessageCleaner,
    commodoreSamSettingsRepository = commodoreSamSettingsRepository,
    soundPlayerManagerProvider = soundPlayerManagerProvider,
    timber = timber,
    ttsCommandBuilder = ttsCommandBuilder,
    ttsSettingsRepository = ttsSettingsRepository,
)


####################################
## DECTalk initialization section ##
####################################

decTalkSettingsRepository: DecTalkSettingsRepositoryInterface = DecTalkSettingsRepository(
    decTalkVoiceMapper = decTalkVoiceMapper,
    settingsJsonReader = JsonFileReader(
        eventLoop = eventLoop,
        fileName = '../config/decTalkSettingsRepository.json'
    )
)

decTalkApiService: DecTalkApiServiceInterface = DecTalkApiService(
    eventLoop = eventLoop,
    decTalkSettingsRepository = decTalkSettingsRepository,
    timber = timber,
    ttsDirectoryProvider = ttsDirectoryProvider
)

decTalkHelper: DecTalkHelperInterface = DecTalkHelper(
    decTalkApiService = decTalkApiService,
    decTalkSettingsRepository = decTalkSettingsRepository,
    timber = timber,
    timeZoneRepository = timeZoneRepository
)

decTalkMessageCleaner: DecTalkMessageCleanerInterface = DecTalkMessageCleaner(
    emojiHelper = emojiHelper,
    timber = timber,
    ttsSettingsRepository = ttsSettingsRepository,
    twitchMessageStringUtils = twitchMessageStringUtils,
)

decTalkTtsManagerProvider: DecTalkTtsManagerProviderInterface = DecTalkTtsManagerProvider(
    chatterPreferredTtsHelper = chatterPreferredTtsHelper,
    decTalkHelper = decTalkHelper,
    decTalkMessageCleaner = decTalkMessageCleaner,
    decTalkSettingsRepository = decTalkSettingsRepository,
    soundPlayerManagerProvider = soundPlayerManagerProvider,
    timber = timber,
    ttsCommandBuilder = ttsCommandBuilder,
    ttsSettingsRepository = ttsSettingsRepository
)

unrestrictedDecTalkMessageCleaner: DecTalkMessageCleanerInterface = DecTalkMessageCleaner(
    emojiHelper = emojiHelper,
    timber = timber,
    ttsSettingsRepository = ttsSettingsRepository,
    twitchMessageStringUtils = twitchMessageStringUtils,
    isUnrestricted = True,
)

unrestrictedDecTalkTtsManagerProvider: DecTalkTtsManagerProviderInterface = UnrestrictedDecTalkTtsManagerProvider(
    chatterPreferredTtsHelper = chatterPreferredTtsHelper,
    decTalkHelper = decTalkHelper,
    decTalkMessageCleaner = unrestrictedDecTalkMessageCleaner,
    decTalkSettingsRepository = decTalkSettingsRepository,
    soundPlayerManagerProvider = soundPlayerManagerProvider,
    timber = timber,
    ttsCommandBuilder = ttsCommandBuilder,
    ttsSettingsRepository = ttsSettingsRepository
)


###################################
## Google initialization section ##
###################################

googleFileExtensionHelper: GoogleFileExtensionHelperInterface = GoogleFileExtensionHelper()

googleTtsMessageCleaner: GoogleTtsMessageCleanerInterface = GoogleTtsMessageCleaner(
    ttsSettingsRepository = ttsSettingsRepository,
    twitchMessageStringUtils = twitchMessageStringUtils,
)

googleApiAccessTokenStorage: GoogleApiAccessTokenStorageInterface = GoogleApiAccessTokenStorage(
    timber = timber,
    timeZoneRepository = timeZoneRepository,
)

googleJsonMapper: GoogleJsonMapperInterface = GoogleJsonMapper(
    timber = timber,
    timeZoneRepository = timeZoneRepository,
)

googleSettingsRepository: GoogleSettingsRepositoryInterface = GoogleSettingsRepository(
    googleJsonMapper = googleJsonMapper,
    settingsJsonReader = JsonFileReader(
        eventLoop = eventLoop,
        fileName = '../config/googleSettingsRepository.json',
    ),
)

googleJwtBuilder: GoogleJwtBuilderInterface = GoogleJwtBuilder(
    googleCloudCredentialsProvider = authRepository,
    googleJsonMapper = googleJsonMapper,
    timeZoneRepository = timeZoneRepository,
)

googleApiService: GoogleApiServiceInterface = GoogleApiService(
    googleApiAccessTokenStorage = googleApiAccessTokenStorage,
    googleCloudProjectCredentialsProvider = authRepository,
    googleJsonMapper = googleJsonMapper,
    googleJwtBuilder = googleJwtBuilder,
    networkClientProvider = networkClientProvider,
    timber = timber,
)

googleTtsApiHelper: GoogleTtsApiHelperInterface = GoogleTtsApiHelper(
    googleApiService = googleApiService,
    timber = timber,
)

googleTtsHelper: GoogleTtsHelperInterface = GoogleTtsHelper(
    eventLoop = eventLoop,
    glacialTtsFileRetriever = glacialTtsFileRetriever,
    googleFileExtensionHelper = googleFileExtensionHelper,
    googleJsonMapper = googleJsonMapper,
    googleSettingsRepository = googleSettingsRepository,
    googleTtsApiHelper = googleTtsApiHelper,
    googleTtsVoicesHelper = googleTtsVoicesHelper,
    timber = timber,
)

googleTtsManagerProvider: GoogleTtsManagerProviderInterface = GoogleTtsManagerProvider(
    chatterPreferredTtsHelper = chatterPreferredTtsHelper,
    googleSettingsRepository = googleSettingsRepository,
    googleTtsHelper = googleTtsHelper,
    googleTtsMessageCleaner = googleTtsMessageCleaner,
    googleTtsVoicesHelper = googleTtsVoicesHelper,
    soundPlayerManagerProvider = soundPlayerManagerProvider,
    timber = timber,
    ttsCommandBuilder = ttsCommandBuilder,
    ttsSettingsRepository = ttsSettingsRepository,
)


##########################################
## Half-Life TTS initialization section ##
##########################################

halfLifeSettingsRepository: HalfLifeSettingsRepositoryInterface = HalfLifeSettingsRepository(
    halfLifeJsonParser = halfLifeVoiceParser,
    settingsJsonReader = JsonFileReader(
        eventLoop = eventLoop,
        fileName = '../config/halfLifeSettingsRepository.json',
    ),
)

halfLifeTtsService: HalfLifeTtsServiceInterface = HalfLifeTtsService(
    eventLoop = eventLoop,
    halfLifeSettingsRepository = halfLifeSettingsRepository,
    timber = timber,
)

halfLifeMessageVoiceParser: HalfLifeMessageVoiceParserInterface = HalfLifeMessageVoiceParser(
    halfLifeVoiceParser = halfLifeVoiceParser
)

halfLifeTtsHelper: HalfLifeTtsHelperInterface = HalfLifeTtsHelper(
    halfLifeMessageVoiceParser = halfLifeMessageVoiceParser,
    halfLifeSettingsRepository = halfLifeSettingsRepository,
    halfLifeTtsService = halfLifeTtsService,
)

halfLifeMessageCleaner: HalfLifeMessageCleanerInterface = HalfLifeMessageCleaner(
    ttsSettingsRepository = ttsSettingsRepository,
    twitchMessageStringUtils = twitchMessageStringUtils
)

halfLifeTtsManagerProvider: HalfLifeTtsManagerProviderInterface = HalfLifeTtsManagerProvider(
    chatterPreferredTtsHelper = chatterPreferredTtsHelper,
    halfLifeMessageCleaner = halfLifeMessageCleaner,
    halfLifeSettingsRepository = halfLifeSettingsRepository,
    halfLifeTtsHelper = halfLifeTtsHelper,
    soundPlayerManagerProvider = soundPlayerManagerProvider,
    timber = timber,
    ttsSettingsRepository = ttsSettingsRepository
)


##########################################
## Microsoft TTS initialization section ##
##########################################

microsoftTtsSettingsRepository: MicrosoftTtsSettingsRepositoryInterface = MicrosoftTtsSettingsRepository(
    microsoftTtsJsonParser = microsoftTtsJsonParser,
    settingsJsonReader = JsonFileReader(
        eventLoop = eventLoop,
        fileName = '../config/microsoftTtsSettingsRepository.json'
    )
)

microsoftTtsApiService: MicrosoftTtsApiServiceInterface = MicrosoftTtsApiService(
    networkClientProvider = networkClientProvider,
    timber = timber
)

microsoftTtsApiHelper: MicrosoftTtsApiHelperInterface = MicrosoftTtsApiHelper(
    microsoftTtsApiService = microsoftTtsApiService,
    timber = timber
)

microsoftTtsMessageVoiceParser: MicrosoftTtsMessageVoiceParserInterface = MicrosoftTtsMessageVoiceParser(
    microsoftTtsJsonParser = microsoftTtsJsonParser
)

microsoftTtsHelper: MicrosoftTtsHelperInterface = MicrosoftTtsHelper(
    eventLoop = eventLoop,
    glacialTtsFileRetriever = glacialTtsFileRetriever,
    microsoftTtsApiHelper = microsoftTtsApiHelper,
    microsoftTtsJsonParser = microsoftTtsJsonParser,
    microsoftTtsMessageVoiceParser = microsoftTtsMessageVoiceParser,
    microsoftTtsSettingsRepository = microsoftTtsSettingsRepository,
    timber = timber
)

microsoftTtsMessageCleaner: MicrosoftTtsMessageCleanerInterface = MicrosoftTtsMessageCleaner(
    ttsSettingsRepository = ttsSettingsRepository,
    twitchMessageStringUtils = twitchMessageStringUtils
)

microsoftTtsManagerProvider: MicrosoftTtsManagerProviderInterface = MicrosoftTtsManagerProvider(
    chatterPreferredTtsHelper = chatterPreferredTtsHelper,
    microsoftTtsHelper = microsoftTtsHelper,
    microsoftTtsMessageCleaner = microsoftTtsMessageCleaner,
    microsoftTtsSettingsRepository = microsoftTtsSettingsRepository,
    soundPlayerManagerProvider = soundPlayerManagerProvider,
    timber = timber,
    ttsCommandBuilder = ttsCommandBuilder,
    ttsSettingsRepository = ttsSettingsRepository
)


##############################################
## Microsoft SAM TTS initialization section ##
##############################################

microsoftSamSettingsRepository: MicrosoftSamSettingsRepositoryInterface = MicrosoftSamSettingsRepository(
    microsoftSamJsonParser = microsoftSamJsonParser,
    settingsJsonReader = JsonFileReader(
        eventLoop = eventLoop,
        fileName = '../config/microsoftSamSettingsRepository.json',
    ),
)

microsoftSamApiService: MicrosoftSamApiServiceInterface = MicrosoftSamApiService(
    networkClientProvider = networkClientProvider,
    timber = timber,
)

microsoftSamApiHelper: MicrosoftSamApiHelperInterface = MicrosoftSamApiHelper(
    microsoftSamApiService = microsoftSamApiService,
    timber = timber,
)

microsoftSamMessageVoiceParser: MicrosoftSamMessageVoiceParserInterface = MicrosoftSamMessageVoiceParser(
    microsoftSamJsonParser = microsoftSamJsonParser,
)

microsoftSamHelper: MicrosoftSamHelperInterface = MicrosoftSamHelper(
    eventLoop = eventLoop,
    glacialTtsFileRetriever = glacialTtsFileRetriever,
    microsoftSamApiHelper = microsoftSamApiHelper,
    microsoftSamJsonParser = microsoftSamJsonParser,
    microsoftSamMessageVoiceParser = microsoftSamMessageVoiceParser,
    microsoftSamSettingsRepository = microsoftSamSettingsRepository,
    timber = timber,
)

microsoftSamMessageCleaner: MicrosoftSamMessageCleanerInterface = MicrosoftSamMessageCleaner(
    ttsSettingsRepository = ttsSettingsRepository,
    twitchMessageStringUtils = twitchMessageStringUtils,
)

microsoftSamTtsManagerProvider: MicrosoftSamTtsManagerProviderInterface = MicrosoftSamTtsManagerProvider(
    chatterPreferredTtsHelper = chatterPreferredTtsHelper,
    microsoftSamHelper = microsoftSamHelper,
    microsoftSamMessageCleaner = microsoftSamMessageCleaner,
    microsoftSamSettingsRepository = microsoftSamSettingsRepository,
    soundPlayerManagerProvider = soundPlayerManagerProvider,
    timber = timber,
    ttsCommandBuilder = ttsCommandBuilder,
    ttsSettingsRepository = ttsSettingsRepository,
)


################################################
## Stream Elements TTS initialization section ##
################################################

streamElementsApiService: StreamElementsApiServiceInterface = StreamElementsApiService(
    networkClientProvider = networkClientProvider,
    timber = timber
)

streamElementsMessageCleaner: StreamElementsMessageCleanerInterface = StreamElementsMessageCleaner(
    ttsSettingsRepository = ttsSettingsRepository,
    twitchMessageStringUtils = twitchMessageStringUtils
)

streamElementsMessageVoiceParser: StreamElementsMessageVoiceParserInterface = StreamElementsMessageVoiceParser(
    streamElementsJsonParser = streamElementsJsonParser
)

streamElementsSettingsRepository: StreamElementsSettingsRepositoryInterface = StreamElementsSettingsRepository(
    settingsJsonReader = JsonFileReader(
        eventLoop = eventLoop,
        fileName = '../config/streamElementsSettingsRepository.json'
    ),
    streamElementsJsonParser = streamElementsJsonParser
)

streamElementsUserKeyRepository: StreamElementsUserKeyRepositoryInterface = StreamElementsUserKeyRepository(
    backingDatabase = backingDatabase,
    timber = timber,
    userIdsRepository = userIdsRepository,
    seedFileReader = JsonFileReader(
        eventLoop = eventLoop,
        fileName = '../config/streamElementsUserKeyRepositorySeedFile.json'
    )
)

streamElementsApiHelper: StreamElementsApiHelperInterface = StreamElementsApiHelper(
    streamElementsApiService = streamElementsApiService,
    streamElementsUserKeyRepository = streamElementsUserKeyRepository,
    timber = timber
)

streamElementsHelper: StreamElementsHelperInterface = StreamElementsHelper(
    eventLoop = eventLoop,
    glacialTtsFileRetriever = glacialTtsFileRetriever,
    streamElementsApiHelper = streamElementsApiHelper,
    streamElementsJsonParser = streamElementsJsonParser,
    streamElementsMessageVoiceParser = streamElementsMessageVoiceParser,
    streamElementsSettingsRepository = streamElementsSettingsRepository,
    timber = timber
)

streamElementsTtsManagerProvider: StreamElementsTtsManagerProviderInterface = StreamElementsTtsManagerProvider(
    chatterPreferredTtsHelper = chatterPreferredTtsHelper,
    soundPlayerManagerProvider = soundPlayerManagerProvider,
    streamElementsHelper = streamElementsHelper,
    streamElementsMessageCleaner = streamElementsMessageCleaner,
    streamElementsSettingsRepository = streamElementsSettingsRepository,
    timber = timber,
    ttsCommandBuilder = ttsCommandBuilder,
    ttsSettingsRepository = ttsSettingsRepository
)


########################################
## TTS Monster initialization section ##
########################################

ttsMonsterSettingsRepository: TtsMonsterSettingsRepositoryInterface = TtsMonsterSettingsRepository(
    settingsJsonReader = JsonFileReader(
        eventLoop = eventLoop,
        fileName = '../config/ttsMonsterSettingsRepository.json'
    ),
    ttsMonsterPrivateApiJsonMapper = ttsMonsterPrivateApiJsonMapper
)

ttsMonsterTokensRepository: TtsMonsterTokensRepositoryInterface = TtsMonsterTokensRepository(
    backingDatabase = backingDatabase,
    timber = timber,
    userIdsRepository = userIdsRepository,
    seedFileReader = JsonFileReader(
        eventLoop = eventLoop,
        fileName = '../config/ttsMonsterTokensRepositorySeedFile.json'
    )
)

ttsMonsterPrivateApiService: TtsMonsterPrivateApiServiceInterface = TtsMonsterPrivateApiService(
    networkClientProvider = networkClientProvider,
    timber = timber,
    ttsMonsterPrivateApiJsonMapper = ttsMonsterPrivateApiJsonMapper
)

ttsMonsterPrivateApiHelper: TtsMonsterPrivateApiHelperInterface = TtsMonsterPrivateApiHelper(
    timber = timber,
    ttsMonsterPrivateApiService = ttsMonsterPrivateApiService,
    ttsMonsterTokensRepository = ttsMonsterTokensRepository
)

ttsMonsterMessageChunkParser: TtsMonsterMessageChunkParserInterface = TtsMonsterMessageChunkParser()

ttsMonsterHelper: TtsMonsterHelperInterface = TtsMonsterHelper(
    eventLoop = eventLoop,
    glacialTtsFileRetriever = glacialTtsFileRetriever,
    timber = timber,
    ttsMonsterMessageChunkParser = ttsMonsterMessageChunkParser,
    ttsMonsterPrivateApiHelper = ttsMonsterPrivateApiHelper,
    ttsMonsterSettingsRepository = ttsMonsterSettingsRepository
)

ttsMonsterMessageCleaner: TtsMonsterMessageCleanerInterface = TtsMonsterMessageCleaner(
    ttsSettingsRepository = ttsSettingsRepository,
    twitchMessageStringUtils = twitchMessageStringUtils,
)

ttsMonsterTtsManagerProvider: TtsMonsterTtsManagerProviderInterface = TtsMonsterTtsManagerProvider(
    chatterPreferredTtsHelper = chatterPreferredTtsHelper,
    soundPlayerManagerProvider = soundPlayerManagerProvider,
    timber = timber,
    ttsCommandBuilder = ttsCommandBuilder,
    ttsMonsterHelper = ttsMonsterHelper,
    ttsMonsterMessageCleaner = ttsMonsterMessageCleaner,
    ttsMonsterSettingsRepository = ttsMonsterSettingsRepository,
    ttsSettingsRepository = ttsSettingsRepository,
)


###################################################
## Composite TTS Provider initialization section ##
###################################################

compositeTtsManagerProvider: CompositeTtsManagerProviderInterface = CompositeTtsManagerProvider(
    backgroundTaskHelper = backgroundTaskHelper,
    chatterPreferredTtsHelper = chatterPreferredTtsHelper,
    commodoreSamTtsManagerProvider = commodoreSamTtsManagerProvider,
    decTalkTtsManagerProvider = decTalkTtsManagerProvider,
    googleTtsManagerProvider = googleTtsManagerProvider,
    halfLifeTtsManagerProvider = halfLifeTtsManagerProvider,
    microsoftSamTtsManagerProvider = microsoftSamTtsManagerProvider,
    microsoftTtsManagerProvider = microsoftTtsManagerProvider,
    unrestrictedDecTalkTtsManagerProvider= unrestrictedDecTalkTtsManagerProvider,
    streamElementsTtsManagerProvider = streamElementsTtsManagerProvider,
    timber = timber,
    ttsMonsterTtsManagerProvider = ttsMonsterTtsManagerProvider,
    ttsSettingsRepository = ttsSettingsRepository,
)


##################################################
## Stream Alerts Manager initialization section ##
##################################################

streamAlertsSettingsRepository: StreamAlertsSettingsRepositoryInterface = StreamAlertsSettingsRepository(
    settingsJsonReader = JsonFileReader(
        eventLoop = eventLoop,
        fileName = '../config/streamAlertsSettingsRepository.json',
    ),
)

streamAlertsManager: StreamAlertsManagerInterface = StreamAlertsManager(
    backgroundTaskHelper = backgroundTaskHelper,
    compositeTtsManagerProvider = compositeTtsManagerProvider,
    soundPlayerManagerProvider = soundPlayerManagerProvider,
    streamAlertsSettingsRepository = streamAlertsSettingsRepository,
    timber = timber,
)


####################################
## Weather initialization section ##
####################################

openWeatherJsonMapper: OpenWeatherJsonMapperInterface = OpenWeatherJsonMapper(
    timber = timber,
    timeZoneRepository = timeZoneRepository
)

openWeatherApiService: OpenWeatherApiServiceInterface = OpenWeatherApiService(
    networkClientProvider = networkClientProvider,
    openWeatherApiKeyProvider = authRepository,
    openWeatherJsonMapper = openWeatherJsonMapper,
    timber = timber
)

weatherReportPresenter: WeatherReportPresenterInterface = WeatherReportPresenter()

weatherRepository: WeatherRepositoryInterface = WeatherRepository(
    openWeatherApiKeyProvider = authRepository,
    openWeatherApiService = openWeatherApiService,
    timber = timber
)


######################################
## Trollmoji initialization section ##
######################################

trollmojiSettingsRepository: TrollmojiSettingsRepositoryInterface = TrollmojiSettingsRepository(
    twitchFriendsUserIdRepository = twitchFriendsUserIdRepository,
)

trollmojiHelper: TrollmojiHelperInterface = TrollmojiHelper(
    timber = timber,
    timeZoneRepository = timeZoneRepository,
    trollmojiSettingsRepository = trollmojiSettingsRepository,
    twitchEmotesHelper = twitchEmotesHelper,
)


###################################
## Trivia initialization section ##
###################################

shinyTriviaOccurencesRepository: ShinyTriviaOccurencesRepositoryInterface = ShinyTriviaOccurencesRepository(
    backingDatabase = backingDatabase,
    timeZoneRepository = timeZoneRepository
)

toxicTriviaOccurencesRepository: ToxicTriviaOccurencesRepositoryInterface = ToxicTriviaOccurencesRepository(
    backingDatabase = backingDatabase,
    timeZoneRepository = timeZoneRepository
)

triviaSourceParser: TriviaSourceParserInterface = TriviaSourceParser()

triviaSettingsRepository: TriviaSettingsRepositoryInterface = TriviaSettingsRepository(
    settingsJsonReader = JsonFileReader(
        eventLoop = eventLoop,
        fileName = 'triviaSettingsRepository.json'
    ),
    triviaSourceParser = triviaSourceParser
)

triviaAnswerCompiler: TriviaAnswerCompilerInterface = TriviaAnswerCompiler(
    timber = timber
)

triviaQuestionCompiler: TriviaQuestionCompilerInterface = TriviaQuestionCompiler(
    timber = timber
)
triviaIdGenerator: TriviaIdGeneratorInterface = TriviaIdGenerator()
triviaSourceInstabilityHelper: TriviaSourceInstabilityHelper = TriviaSourceInstabilityHelper(
    timber = timber,
    timeZoneRepository = timeZoneRepository
)
additionalTriviaAnswersRepository: AdditionalTriviaAnswersRepositoryInterface = AdditionalTriviaAnswersRepository(
    backingDatabase = backingDatabase,
    timber = timber,
    triviaSettingsRepository = triviaSettingsRepository,
    twitchHandleProvider = authRepository,
    twitchTokensRepository = twitchTokensRepository,
    userIdsRepository = userIdsRepository
)
bannedTriviaIdsRepository: BannedTriviaIdsRepositoryInterface = BannedTriviaIdsRepository(
    backingDatabase = backingDatabase,
    timber = timber
)
shinyTriviaHelper = ShinyTriviaHelper(
    cutenessRepository = cutenessRepository,
    shinyTriviaOccurencesRepository = shinyTriviaOccurencesRepository,
    timber = timber,
    timeZoneRepository = timeZoneRepository,
    triviaSettingsRepository = triviaSettingsRepository
)
toxicTriviaHelper = ToxicTriviaHelper(
    toxicTriviaOccurencesRepository = toxicTriviaOccurencesRepository,
    timber = timber,
    triviaSettingsRepository = triviaSettingsRepository
)
triviaContentScanner: TriviaContentScannerInterface = TriviaContentScanner(
    bannedWordsRepository = bannedWordsRepository,
    contentScanner = contentScanner,
    timber = timber,
    triviaSettingsRepository = triviaSettingsRepository
)
triviaEmoteRepository: TriviaEmoteRepositoryInterface = TriviaEmoteRepository(
    backingDatabase = backingDatabase
)
triviaEmoteGenerator: TriviaEmoteGeneratorInterface = TriviaEmoteGenerator(
    timber = timber,
    triviaEmoteRepository = triviaEmoteRepository
)
triviaGameBuilder: TriviaGameBuilderInterface = TriviaGameBuilder(
    triviaGameBuilderSettings = generalSettingsRepository,
    triviaIdGenerator = triviaIdGenerator,
    usersRepository = usersRepository
)

bannedTriviaGameControllersRepository: BannedTriviaGameControllersRepositoryInterface = BannedTriviaGameControllersRepository(
    administratorProvider = administratorProvider,
    backingDatabase = backingDatabase,
    timber = timber,
)

triviaGameControllersRepository: TriviaGameControllersRepositoryInterface = TriviaGameControllersRepository(
    backingDatabase = backingDatabase,
    timber = timber,
)

triviaGameGlobalControllersRepository: TriviaGameGlobalControllersRepositoryInterface = TriviaGameGlobalControllersRepository(
    backingDatabase = backingDatabase,
    timber = timber,
)

triviaDifficultyParser: TriviaDifficultyParserInterface = TriviaDifficultyParser()

triviaQuestionTypeParser: TriviaQuestionTypeParserInterface = TriviaQuestionTypeParser()

triviaHistoryRepository: TriviaHistoryRepositoryInterface = TriviaHistoryRepository(
    backingDatabase = backingDatabase,
    timber = timber,
    timeZoneRepository = timeZoneRepository,
    triviaQuestionTypeParser = triviaQuestionTypeParser,
    triviaSettingsRepository = triviaSettingsRepository,
    triviaSourceParser = triviaSourceParser
)

triviaScoreRepository: TriviaScoreRepositoryInterface = TriviaScoreRepository(
    backingDatabase = backingDatabase
)

triviaQuestionPresenter: TriviaQuestionPresenterInterface = TriviaQuestionPresenter()

triviaUtils: TriviaUtilsInterface = TriviaUtils(
    administratorProvider = administratorProvider,
    bannedTriviaGameControllersRepository = bannedTriviaGameControllersRepository,
    timber = timber,
    triviaGameControllersRepository = triviaGameControllersRepository,
    triviaGameGlobalControllersRepository = triviaGameGlobalControllersRepository,
    triviaQuestionPresenter = triviaQuestionPresenter,
    twitchTokensRepository = twitchTokensRepository,
    userIdsRepository = userIdsRepository,
)

bongoJsonParser: BongoJsonParserInterface = BongoJsonParser(
    timber = timber,
    triviaDifficultyParser = triviaDifficultyParser,
    triviaQuestionTypeParser = triviaQuestionTypeParser
)

bongoApiService: BongoApiServiceInterface = BongoApiService(
    networkClientProvider = networkClientProvider,
    bongoJsonParser = bongoJsonParser,
    timber = timber
)

bongoTriviaQuestionRepository = BongoTriviaQuestionRepository(
    bongoApiService = bongoApiService,
    timber = timber,
    triviaQuestionCompiler = triviaQuestionCompiler,
    triviaSettingsRepository = triviaSettingsRepository
)

authSnapshot = authRepository.getAll()

quizApiTriviaQuestionRepository: QuizApiTriviaQuestionRepository | None = None
if authSnapshot.hasQuizApiKey():
    quizApiTriviaQuestionRepository = QuizApiTriviaQuestionRepository(
        networkClientProvider = networkClientProvider,
        quizApiKey = authSnapshot.requireQuizApiKey(),
        timber = timber,
        triviaIdGenerator = triviaIdGenerator,
        triviaSettingsRepository = triviaSettingsRepository
    )

openTriviaDatabaseJsonParser: OpenTriviaDatabaseJsonParserInterface = OpenTriviaDatabaseJsonParser(
    timber = timber,
    triviaDifficultyParser = triviaDifficultyParser,
    triviaQuestionTypeParser = triviaQuestionTypeParser
)

openTriviaDatabaseApiService: OpenTriviaDatabaseApiServiceInterface = OpenTriviaDatabaseApiService(
    networkClientProvider = networkClientProvider,
    openTriviaDatabaseJsonParser = openTriviaDatabaseJsonParser,
    timber = timber
)

openTriviaDatabaseSessionTokenRepository: OpenTriviaDatabaseSessionTokenRepositoryInterface = OpenTriviaDatabaseSessionTokenRepository(
    backingDatabase = backingDatabase,
    timber = timber
)

openTriviaDatabaseQuestionFetcher: OpenTriviaDatabaseQuestionFetcherInterface = OpenTriviaDatabaseQuestionFetcher(
    openTriviaDatabaseApiService = openTriviaDatabaseApiService,
    openTriviaDatabaseSessionTokenRepository = openTriviaDatabaseSessionTokenRepository,
    timber = timber
)

openTriviaDatabaseTriviaQuestionRepository = OpenTriviaDatabaseTriviaQuestionRepository(
    openTriviaDatabaseQuestionFetcher = openTriviaDatabaseQuestionFetcher,
    timber = timber,
    triviaIdGenerator = triviaIdGenerator,
    triviaQuestionCompiler = triviaQuestionCompiler,
    triviaSettingsRepository = triviaSettingsRepository
)

openTriviaQaQuestionTypeParser: OpenTriviaQaQuestionTypeParserInterface = OpenTriviaQaQuestionTypeParser(
    timber = timber
)

openTriviaQaQuestionStorage: OpenTriviaQaQuestionStorageInterface = OpenTriviaQaQuestionStorage(
    questionTypeParser = openTriviaQaQuestionTypeParser,
    timber = timber
)

openTriviaQaTriviaQuestionRepository = OpenTriviaQaTriviaQuestionRepository(
    openTriviaQaQuestionStorage = openTriviaQaQuestionStorage,
    triviaQuestionCompiler = triviaQuestionCompiler,
    triviaSettingsRepository = triviaSettingsRepository
)

triviaDatabaseQuestionStorage: TriviaDatabaseQuestionStorageInterface = TriviaDatabaseQuestionStorage(
    timber = timber,
    triviaDifficultyParser = triviaDifficultyParser,
    triviaQuestionTypeParser = triviaQuestionTypeParser
)

triviaDatabaseTriviaQuestionRepository = TriviaDatabaseTriviaQuestionRepository(
    triviaDatabaseQuestionStorage = triviaDatabaseQuestionStorage,
    triviaQuestionCompiler = triviaQuestionCompiler,
    triviaSettingsRepository = triviaSettingsRepository
)

willFryTriviaJsonParser: WillFryTriviaJsonParserInterface = WillFryTriviaJsonParser(
    timber = timber,
    triviaDifficultyParser = triviaDifficultyParser
)

willFryTriviaApiService: WillFryTriviaApiServiceInterface = WillFryTriviaApiService(
    networkClientProvider = networkClientProvider,
    timber = timber,
    willFryTriviaJsonParser = willFryTriviaJsonParser
)

willFryTriviaQuestionRepository = WillFryTriviaQuestionRepository(
    timber = timber,
    triviaQuestionCompiler = triviaQuestionCompiler,
    triviaSettingsRepository = triviaSettingsRepository,
    willFryTriviaApiService = willFryTriviaApiService
)

glacialTriviaQuestionRepository: GlacialTriviaQuestionRepositoryInterface = GlacialTriviaQuestionRepository(
    additionalTriviaAnswersRepository = additionalTriviaAnswersRepository,
    timber = timber,
    triviaAnswerCompiler = triviaAnswerCompiler,
    triviaQuestionCompiler = triviaQuestionCompiler,
    triviaSettingsRepository = triviaSettingsRepository,
    twitchHandleProvider = authRepository,
    userIdsRepository = userIdsRepository
)

lotrDatabaseQuestionStorage: LotrDatabaseQuestionStorageInterface = LotrDatabaseQuestionStorage(
    timber = timber
)

lotrTriviaQuestionRepository = LotrTriviaQuestionRepository(
    additionalTriviaAnswersRepository = additionalTriviaAnswersRepository,
    lotrDatabaseQuestionStorage = lotrDatabaseQuestionStorage,
    timber = timber,
    triviaAnswerCompiler = triviaAnswerCompiler,
    triviaQuestionCompiler = triviaQuestionCompiler,
    triviaSettingsRepository = triviaSettingsRepository
)

millionaireTriviaQuestionStorage: MillionaireTriviaQuestionStorageInterface = MillionaireTriviaQuestionStorage(
    timber = timber
)

millionaireTriviaQuestionRepository = MillionaireTriviaQuestionRepository(
    millionaireTriviaQuestionStorage = millionaireTriviaQuestionStorage,
    triviaQuestionCompiler = triviaQuestionCompiler,
    triviaSettingsRepository = triviaSettingsRepository
)

pokepediaTriviaQuestionGenerator: PokepediaTriviaQuestionGeneratorInterface = PokepediaTriviaQuestionGenerator(
    pokepediaRepository = pokepediaRepository,
    triviaSettingsRepository = triviaSettingsRepository
)

triviaBanHelper: TriviaBanHelperInterface = TriviaBanHelper(
    bannedTriviaIdsRepository = bannedTriviaIdsRepository,
    funtoonHelper = funtoonHelper,
    glacialTriviaQuestionRepository = glacialTriviaQuestionRepository,
    triviaSettingsRepository = triviaSettingsRepository
)

triviaVerifier: TriviaVerifierInterface = TriviaVerifier(
    timber = timber,
    triviaBanHelper = triviaBanHelper,
    triviaContentScanner = triviaContentScanner,
    triviaHistoryRepository = triviaHistoryRepository
)

triviaScraper: TriviaScraperInterface = TriviaScraper(
    glacialTriviaQuestionRepository = glacialTriviaQuestionRepository,
    timber = timber,
    triviaSettingsRepository = triviaSettingsRepository
)

triviaQuestionOccurrencesRepository: TriviaQuestionOccurrencesRepositoryInterface = TriviaQuestionOccurrencesRepository(
    backingDatabase = backingDatabase,
    timber = timber
)

triviaRepository: TriviaRepositoryInterface = TriviaRepository(
    backgroundTaskHelper = backgroundTaskHelper,
    bongoTriviaQuestionRepository = bongoTriviaQuestionRepository,
    funtoonTriviaQuestionRepository = FuntoonTriviaQuestionRepository(
        additionalTriviaAnswersRepository = additionalTriviaAnswersRepository,
        funtoonApiService = funtoonApiService,
        timber = timber,
        triviaAnswerCompiler = triviaAnswerCompiler,
        triviaQuestionCompiler = triviaQuestionCompiler,
        triviaSettingsRepository = triviaSettingsRepository
    ),
    glacialTriviaQuestionRepository = glacialTriviaQuestionRepository,
    jServiceTriviaQuestionRepository = None,
    lotrTriviaQuestionRepository = lotrTriviaQuestionRepository,
    millionaireTriviaQuestionRepository = millionaireTriviaQuestionRepository,
    openTriviaDatabaseTriviaQuestionRepository = openTriviaDatabaseTriviaQuestionRepository,
    openTriviaQaTriviaQuestionRepository = openTriviaQaTriviaQuestionRepository,
    pkmnTriviaQuestionRepository = PkmnTriviaQuestionRepository(
        pokepediaTriviaQuestionGenerator = pokepediaTriviaQuestionGenerator,
        triviaIdGenerator = triviaIdGenerator,
        triviaQuestionCompiler = triviaQuestionCompiler,
        triviaSettingsRepository = triviaSettingsRepository
    ),
    quizApiTriviaQuestionRepository = quizApiTriviaQuestionRepository,
    timber = timber,
    triviaDatabaseTriviaQuestionRepository = triviaDatabaseTriviaQuestionRepository,
    triviaQuestionCompanyTriviaQuestionRepository = TriviaQuestionCompanyTriviaQuestionRepository(
        timber = timber,
        triviaQuestionCompiler = triviaQuestionCompiler,
        triviaSettingsRepository = triviaSettingsRepository
    ),
    triviaQuestionOccurrencesRepository = triviaQuestionOccurrencesRepository,
    triviaScraper = triviaScraper,
    triviaSettingsRepository = triviaSettingsRepository,
    triviaSourceInstabilityHelper = triviaSourceInstabilityHelper,
    triviaVerifier = triviaVerifier,
    twitchHandleProvider = authRepository,
    userIdsRepository = userIdsRepository,
    willFryTriviaQuestionRepository = willFryTriviaQuestionRepository,
    wwtbamTriviaQuestionRepository = WwtbamTriviaQuestionRepository(
        timber = timber,
        triviaQuestionCompiler = triviaQuestionCompiler,
        triviaSettingsRepository = triviaSettingsRepository
    )
)

triviaTwitchEmoteHelper: TriviaTwitchEmoteHelperInterface = TriviaTwitchEmoteHelper(
    trollmojiHelper = trollmojiHelper,
)

triviaGameStore: TriviaGameStoreInterface = TriviaGameStore()

triviaGameMachine: TriviaGameMachineInterface = TriviaGameMachine(
    backgroundTaskHelper = backgroundTaskHelper,
    cutenessRepository = cutenessRepository,
    queuedTriviaGameStore = QueuedTriviaGameStore(
        timber = timber,
        triviaIdGenerator = triviaIdGenerator,
        triviaSettingsRepository = triviaSettingsRepository
    ),
    shinyTriviaHelper = shinyTriviaHelper,
    superTriviaCooldownHelper = SuperTriviaCooldownHelper(
        timeZoneRepository = timeZoneRepository,
        triviaSettingsRepository = triviaSettingsRepository
    ),
    timber = timber,
    timeZoneRepository = timeZoneRepository,
    toxicTriviaHelper = toxicTriviaHelper,
    triviaAnswerChecker = TriviaAnswerChecker(
        timber = timber,
        triviaAnswerCompiler = triviaAnswerCompiler,
        triviaSettingsRepository = triviaSettingsRepository
    ),
    triviaEmoteGenerator = triviaEmoteGenerator,
    triviaGameStore = triviaGameStore,
    triviaIdGenerator = triviaIdGenerator,
    triviaRepository = triviaRepository,
    triviaScoreRepository = triviaScoreRepository,
    triviaSettingsRepository = triviaSettingsRepository,
    triviaTwitchEmoteHelper = triviaTwitchEmoteHelper,
    twitchTokensRepository = twitchTokensRepository,
    userIdsRepository = userIdsRepository
)

triviaEventHandler: AbsTriviaEventHandler = TriviaEventHandler(
    timber = timber,
    triviaUtils = triviaUtils,
    twitchChatMessenger = twitchChatMessenger,
    usersRepository = usersRepository,
)


##########################################################
## Chatter Inventory and Timeout initialization section ##
##########################################################

asplodieStatsPresenter: AsplodieStatsPresenter = AsplodieStatsPresenter()

asplodieStatsRepository: AsplodieStatsRepositoryInterface = AsplodieStatsRepository(
    backingDatabase = backingDatabase,
    timber = timber,
)

guaranteedTimeoutUsersRepository: GuaranteedTimeoutUsersRepositoryInterface = GuaranteedTimeoutUsersRepository(
    timber = timber,
    twitchFriendsUserIdRepository = twitchFriendsUserIdRepository,
)

isLiveOnTwitchRepository: IsLiveOnTwitchRepositoryInterface = IsLiveOnTwitchRepository(
    administratorProvider = administratorProvider,
    timber = timber,
    twitchApiService = twitchApiService,
    twitchTokensRepository = twitchTokensRepository,
)

twitchTimeoutHelper: TwitchTimeoutHelperInterface = TwitchTimeoutHelper(
    activeChattersRepository = activeChattersRepository,
    globalTwitchConstants = globalTwitchConstants,
    timber = timber,
    timeoutImmuneUserIdsRepository = timeoutImmuneUserIdsRepository,
    twitchApiService = twitchApiService,
    twitchHandleProvider = authRepository,
    twitchTimeoutRemodHelper = twitchTimeoutRemodHelper,
    userIdsRepository = userIdsRepository,
)

timeoutActionSettings: TimeoutActionSettingsInterface = TimeoutActionSettings(
    settingsJsonReader = JsonFileReader(
        eventLoop = eventLoop,
        fileName = '../config/timeoutActionSettings.json',
    ),
)


######################################
## Voicemail initialization section ##
######################################

voicemailSettingsRepository: VoicemailSettingsRepositoryInterface = VoicemailSettingsRepository(
    settingsJsonReader = JsonFileReader(
        eventLoop = eventLoop,
        fileName = '../config/voicemailSettingsRepository.json'
    )
)

voicemailIdGenerator: VoicemailIdGeneratorInterface = VoicemailIdGenerator()

voicemailsRepository: VoicemailsRepositoryInterface = VoicemailsRepository(
    backingDatabase = backingDatabase,
    timber = timber,
    timeZoneRepository = timeZoneRepository,
    voicemailIdGenerator = voicemailIdGenerator
)

voicemailHelper: VoicemailHelperInterface = VoicemailHelper(
    timber = timber,
    timeZoneRepository = timeZoneRepository,
    twitchTokensUtils = twitchTokensUtils,
    userIdsRepository = userIdsRepository,
    voicemailsRepository = voicemailsRepository,
    voicemailSettingsRepository = voicemailSettingsRepository
)

voicemailChatAction = VoicemailChatAction(
    timber = timber,
    timeZoneRepository = timeZoneRepository,
    twitchChatMessenger = twitchChatMessenger,
    voicemailHelper = voicemailHelper,
    voicemailSettingsRepository = voicemailSettingsRepository,
)

voicemailPointRedemption = VoicemailPointRedemption(
    activeChattersRepository = activeChattersRepository,
    timber = timber,
    twitchChatMessenger = twitchChatMessenger,
    twitchFollowingStatusRepository = twitchFollowingStatusRepository,
    twitchTokensRepository = twitchTokensRepository,
    userIdsRepository = userIdsRepository,
    voicemailHelper = voicemailHelper,
    voicemailSettingsRepository = voicemailSettingsRepository,
)


########################################
## Pixels Dice initialization section ##
########################################

pixelsDiceEventHandler: PixelsDiceEventListener = PixelsDiceEventHandler(
    administratorProvider = administratorProvider,
    timber = timber,
    twitchChatMessenger = twitchChatMessenger,
)

pixelsDiceSettings: PixelsDiceSettingsInterface = PixelsDiceSettings(
    settingsJsonReader = JsonFileReader(
        eventLoop = eventLoop,
        fileName = '../config/pixelsDiceSettings.json',
    ),
)

pixelsDiceStateMapper: PixelsDiceStateMapperInterface = PixelsDiceStateMapper()

pixelsDiceMachine: PixelsDiceMachineInterface = PixelsDiceMachine(
    backgroundTaskHelper = backgroundTaskHelper,
    pixelsDiceStateMapper = pixelsDiceStateMapper,
    pixelsDiceSettings = pixelsDiceSettings,
    timber = timber,
)


##############################################
## Chatter Inventory initialization section ##
##############################################

chatterInventoryMapper: ChatterInventoryMapperInterface = ChatterInventoryMapper()

chatterInventoryRepository: ChatterInventoryRepositoryInterface = ChatterInventoryRepository(
    backingDatabase = backingDatabase,
    chatterInventoryMapper = chatterInventoryMapper,
    timber = timber,
    timeZoneRepository = timeZoneRepository,
)

chatterInventorySettings: ChatterInventorySettingsInterface = ChatterInventorySettings(
    chatterInventoryMapper = chatterInventoryMapper,
    settingsJsonReader = JsonFileReader(
        eventLoop = eventLoop,
        fileName = '../config/chatterInventorySettings.json',
    ),
)

chatterInventoryHelper: ChatterInventoryHelperInterface = ChatterInventoryHelper(
    chatterInventoryRepository = chatterInventoryRepository,
    chatterInventorySettings = chatterInventorySettings,
    twitchTokensUtils = twitchTokensUtils,
    userIdsRepository = userIdsRepository,
)

chatterTimeoutHistoryMapper: ChatterTimeoutHistoryMapperInterface = ChatterTimeoutHistoryMapper()

chatterTimeoutHistoryRepository: ChatterTimeoutHistoryRepositoryInterface = ChatterTimeoutHistoryRepository(
    backingDatabase = backingDatabase,
    chatterTimeoutHistoryMapper = chatterTimeoutHistoryMapper,
    timber = timber,
    timeZoneRepository = timeZoneRepository,
)

calculateTimeoutDurationUseCase = CalculateTimeoutDurationUseCase()

determineAirStrikeTargetsUseCase = DetermineAirStrikeTargetsUseCase(
    activeChattersRepository = activeChattersRepository,
    timber = timber,
    timeoutActionSettings = timeoutActionSettings,
    timeoutImmuneUserIdsRepository = timeoutImmuneUserIdsRepository,
    twitchTokensUtils = twitchTokensUtils,
    userIdsRepository = userIdsRepository,
)

determineBananaTargetUseCase = DetermineBananaTargetUseCase(
    chatterTimeoutHistoryRepository = chatterTimeoutHistoryRepository,
    guaranteedTimeoutUsersRepository = guaranteedTimeoutUsersRepository,
    timber = timber,
    timeoutActionSettings = timeoutActionSettings,
    twitchMessageStringUtils = twitchMessageStringUtils,
    twitchTokensUtils = twitchTokensUtils,
)

determineGrenadeTargetUseCase = DetermineGrenadeTargetUseCase(
    activeChattersRepository = activeChattersRepository,
    timber = timber,
    timeoutActionSettings = timeoutActionSettings,
    timeoutImmuneUserIdsRepository = timeoutImmuneUserIdsRepository,
    twitchTokensUtils = twitchTokensUtils,
    userIdsRepository = userIdsRepository,
)

determineTimeoutTargetUseCase = DetermineTimeoutTargetUseCase(
    timber = timber,
    timeoutImmuneUserIdsRepository = timeoutImmuneUserIdsRepository,
    twitchMessageStringUtils = twitchMessageStringUtils,
    twitchTokensUtils = twitchTokensUtils,
    userIdsRepository = userIdsRepository,
)

determineTm36SplashTargetUseCase = DetermineTm36SplashTargetUseCase(
    activeChattersRepository = activeChattersRepository,
    timber = timber,
    timeoutActionSettings = timeoutActionSettings,
    timeoutImmuneUserIdsRepository = timeoutImmuneUserIdsRepository,
    twitchTokensUtils = twitchTokensUtils,
    userIdsRepository = userIdsRepository,
)

timeoutIdGenerator: TimeoutIdGeneratorInterface = TimeoutIdGenerator()

anivCopyMessageTimeoutScoreRepository: AnivCopyMessageTimeoutScoreRepositoryInterface = AnivCopyMessageTimeoutScoreRepository(
    backingDatabase = backingDatabase,
    timeZoneRepository = timeZoneRepository,
)

timeoutActionMachine: TimeoutActionMachineInterface = TimeoutActionMachine(
    anivCopyMessageTimeoutScoreRepository = anivCopyMessageTimeoutScoreRepository,
    asplodieStatsRepository = asplodieStatsRepository,
    backgroundTaskHelper = backgroundTaskHelper,
    calculateTimeoutDurationUseCase = calculateTimeoutDurationUseCase,
    chatterInventoryHelper = chatterInventoryHelper,
    chatterTimeoutHistoryRepository = chatterTimeoutHistoryRepository,
    determineAirStrikeTargetsUseCase = determineAirStrikeTargetsUseCase,
    determineBananaTargetUseCase = determineBananaTargetUseCase,
    determineGrenadeTargetUseCase = determineGrenadeTargetUseCase,
    determineTimeoutTargetUseCase = determineTimeoutTargetUseCase,
    determineTm36SplashTargetUseCase = determineTm36SplashTargetUseCase,
    guaranteedTimeoutUsersRepository = guaranteedTimeoutUsersRepository,
    isLiveOnTwitchRepository = isLiveOnTwitchRepository,
    pixelsDiceMachine = pixelsDiceMachine,
    timber = timber,
    timeoutIdGenerator = timeoutIdGenerator,
    trollmojiHelper = trollmojiHelper,
    twitchTimeoutHelper = twitchTimeoutHelper,
    twitchTokensUtils = twitchTokensUtils,
    userIdsRepository = userIdsRepository,
)

timeoutEventHandler: AbsTimeoutEventHandler = TimeoutEventHandler(
    backgroundTaskHelper = backgroundTaskHelper,
    soundPlayerManagerProvider = soundPlayerManagerProvider,
    streamAlertsManager = streamAlertsManager,
    timber = timber,
    twitchChatMessenger = twitchChatMessenger,
)

cassetteTapeItemUseCase = CassetteTapeItemUseCase(
    twitchFollowingStatusRepository = twitchFollowingStatusRepository,
    twitchMessageStringUtils = twitchMessageStringUtils,
    twitchTokensRepository = twitchTokensRepository,
    userIdsRepository = userIdsRepository,
    voicemailHelper = voicemailHelper,
    voicemailSettingsRepository = voicemailSettingsRepository,
)

chatterInventoryIdGenerator: ChatterInventoryIdGeneratorInterface = ChatterInventoryIdGenerator()

chatterInventoryItemUseMachine: ChatterInventoryItemUseMachineInterface = ChatterInventoryItemUseMachine(
    backgroundTaskHelper = backgroundTaskHelper,
    cassetteTapeItemUseCase = cassetteTapeItemUseCase,
    chatterInventoryIdGenerator = chatterInventoryIdGenerator,
    chatterInventoryRepository = chatterInventoryRepository,
    chatterInventorySettings = chatterInventorySettings,
    timber = timber,
    timeoutActionMachine = timeoutActionMachine,
    timeoutIdGenerator = timeoutIdGenerator,
    trollmojiHelper = trollmojiHelper,
    twitchHandleProvider = authRepository,
    twitchTokensRepository = twitchTokensRepository,
    twitchTokensUtils = twitchTokensUtils,
    userIdsRepository = userIdsRepository,
)

chatterItemEventHandler: AbsChatterItemEventHandler = ChatterItemEventHandler(
    backgroundTaskHelper = backgroundTaskHelper,
    soundPlayerManagerProvider = soundPlayerManagerProvider,
    soundPlayerRandomizerHelper = soundPlayerRandomizerHelper,
    streamAlertsManager = streamAlertsManager,
    timber = timber,
    twitchChatMessenger = twitchChatMessenger,
)

itemRequestMessageParser = ItemRequestMessageParser(
    chatterInventoryMapper = chatterInventoryMapper,
)

useChatterItemHelper: UseChatterItemHelperInterface = UseChatterItemHelper(
    chatterInventoryIdGenerator = chatterInventoryIdGenerator,
    chatterInventoryItemUseMachine = chatterInventoryItemUseMachine,
    chatterInventorySettings = chatterInventorySettings,
    itemRequestMessageParser = itemRequestMessageParser,
    timber = timber,
)


#################################
## aniv initialization section ##
#################################

anivSettings: AnivSettingsInterface = AnivSettings(
    settingsJsonReader = JsonFileReader(
        eventLoop = eventLoop,
        fileName = '../config/anivSettings.json',
    ),
)

anivCopyMessageTimeoutScoreHelper: AnivCopyMessageTimeoutScoreHelperInterface = AnivCopyMessageTimeoutScoreHelper(
    anivCopyMessageTimeoutScoreRepository = anivCopyMessageTimeoutScoreRepository,
    anivSettings = anivSettings,
    twitchTokensUtils = twitchTokensUtils,
    userIdsRepository = userIdsRepository,
)

anivCopyMessageTimeoutScorePresenter: AnivCopyMessageTimeoutScorePresenterInterface = AnivCopyMessageTimeoutScorePresenter()

anivUserIdsRepository: AnivUserIdsRepositoryInterface = AnivUserIdsRepository(
    twitchFriendsUserIdRepository = twitchFriendsUserIdRepository,
)

anivContentScanner: AnivContentScannerInterface = AnivContentScanner(
    contentScanner = contentScanner,
    timber = timber,
)

mostRecentAnivMessageRepository: MostRecentAnivMessageRepositoryInterface = MostRecentAnivMessageRepository(
    timber = timber,
    timeZoneRepository = timeZoneRepository,
)

mostRecentAnivMessageTimeoutHelper: MostRecentAnivMessageTimeoutHelperInterface = MostRecentAnivMessageTimeoutHelper(
    anivCopyMessageTimeoutScoreRepository = anivCopyMessageTimeoutScoreRepository,
    anivSettings = anivSettings,
    anivUserIdsRepository = anivUserIdsRepository,
    mostRecentAnivMessageRepository = mostRecentAnivMessageRepository,
    timber = timber,
    timeoutActionMachine = timeoutActionMachine,
    timeoutIdGenerator = timeoutIdGenerator,
    timeoutImmuneUserIdsRepository = timeoutImmuneUserIdsRepository,
    timeZoneRepository = timeZoneRepository,
    twitchChannelEditorsRepository = twitchChannelEditorsRepository,
    twitchHandleProvider = authRepository,
    twitchTokensRepository = twitchTokensRepository,
    userIdsRepository = userIdsRepository,
)


##############################################
## Recurring Actions initialization section ##
##############################################

recurringActionsJsonParser: RecurringActionsJsonParserInterface = RecurringActionsJsonParser(
    languagesRepository = languagesRepository,
    timber = timber
)

recurringActionsRepository: RecurringActionsRepositoryInterface = RecurringActionsRepository(
    backingDatabase = backingDatabase,
    recurringActionsJsonParser = recurringActionsJsonParser,
    timber = timber
)

mostRecentRecurringActionRepository: MostRecentRecurringActionRepositoryInterface = MostRecentRecurringActionRepository(
    backingDatabase = backingDatabase,
    recurringActionsJsonParser = recurringActionsJsonParser,
    timber = timber,
    timeZoneRepository = timeZoneRepository
)

recurringActionsMachine: RecurringActionsMachineInterface = RecurringActionsMachine(
    backgroundTaskHelper = backgroundTaskHelper,
    cutenessRepository = cutenessRepository,
    isLiveOnTwitchRepository = isLiveOnTwitchRepository,
    locationsRepository = locationsRepository,
    mostRecentRecurringActionRepository = mostRecentRecurringActionRepository,
    recurringActionsRepository = recurringActionsRepository,
    timber = timber,
    timeZoneRepository = timeZoneRepository,
    triviaGameBuilder = triviaGameBuilder,
    triviaGameMachine = triviaGameMachine,
    userIdsRepository = userIdsRepository,
    usersRepository = usersRepository,
    weatherRepository = weatherRepository,
    wordOfTheDayRepository = wordOfTheDayRepository
)

recurringActionsHelper: RecurringActionsHelperInterface = RecurringActionsHelper(
    recurringActionsRepository = recurringActionsRepository,
    timber = timber
)

recurringActionsWizard: RecurringActionsWizardInterface = RecurringActionsWizard(
    timber = timber
)

recurringActionsEventHandler: AbsRecurringActionsEventHandler = RecurringActionsEventHandler(
    cutenessPresenter = cutenessPresenter,
    timber = timber,
    twitchChatMessenger = twitchChatMessenger,
    weatherReportPresenter = weatherReportPresenter,
    wordOfTheDayPresenter = wordOfTheDayPresenter,
)


#################################
## Bean initialization section ##
#################################

beanStatsPresenter: BeanStatsPresenterInterface = BeanStatsPresenter()

beanStatsRepository: BeanStatsRepositoryInterface = BeanStatsRepository(
    backingDatabase = backingDatabase,
    timber = timber,
    timeZoneRepository = timeZoneRepository,
    userIdsRepository = userIdsRepository
)


########################################
## Translation initialization section ##
########################################

deepLJsonMapper: DeepLJsonMapperInterface = DeepLJsonMapper(
    languagesRepository = languagesRepository,
    timber = timber
)

deepLApiService: DeepLApiServiceInterface = DeepLApiService(
    deepLAuthKeyProvider = authRepository,
    deepLJsonMapper = deepLJsonMapper,
    networkClientProvider = networkClientProvider,
    timber = timber
)

deepLTranslationApi = DeepLTranslationApi(
    deepLApiService = deepLApiService,
    deepLAuthKeyProvider = authRepository,
    timber = timber
)

googleTranslationApi = GoogleTranslationApi(
    googleApiService = googleApiService,
    googleCloudProjectCredentialsProvider = authRepository,
    languagesRepository = languagesRepository,
    timber = timber
)

translationHelper: TranslationHelperInterface = TranslationHelper(
    deepLTranslationApi = deepLTranslationApi,
    googleTranslationApi = googleTranslationApi,
    languagesRepository = languagesRepository,
    timber = timber
)


##########################################
## Crowd Control initialization section ##
##########################################

crowdControlIdGenerator: CrowdControlIdGeneratorInterface = CrowdControlIdGenerator()

crowdControlMessagePresenter: CrowdControlMessagePresenterInterface = CrowdControlMessagePresenter(
    trollmojiHelper = trollmojiHelper
)

crowdControlMessageListener: CrowdControlMessageListener = CrowdControlMessageHandler(
    crowdControlMessagePresenter = crowdControlMessagePresenter,
    twitchChatMessenger = twitchChatMessenger,
)

crowdControlSettingsRepository: CrowdControlSettingsRepositoryInterface = CrowdControlSettingsRepository(
    settingsJsonReader = JsonFileReader(
        eventLoop = eventLoop,
        fileName = '../config/crowdControlSettingsRepository.json'
    )
)

crowdControlMachine: CrowdControlMachineInterface = CrowdControlMachine(
    backgroundTaskHelper = backgroundTaskHelper,
    crowdControlIdGenerator = crowdControlIdGenerator,
    crowdControlSettingsRepository = crowdControlSettingsRepository,
    soundPlayerManagerProvider = soundPlayerManagerProvider,
    timber = timber,
    timeZoneRepository = timeZoneRepository
)

crowdControlAutomator: CrowdControlAutomatorInterface = CrowdControlAutomator(
    backgroundTaskHelper = backgroundTaskHelper,
    crowdControlIdGenerator = crowdControlIdGenerator,
    crowdControlMachine = crowdControlMachine,
    timber = timber,
    timeZoneRepository = timeZoneRepository,
    twitchHandleProvider = authRepository,
    userIdsRepository = userIdsRepository,
    usersRepository = usersRepository
)

crowdControlUserInputUtils: CrowdControlUserInputUtilsInterface = CrowdControlUserInputUtils(
    twitchMessageStringUtils = twitchMessageStringUtils
)

crowdControlCheerActionHelper: CrowdControlCheerActionHelperInterface = CrowdControlCheerActionHelper(
    crowdControlIdGenerator = crowdControlIdGenerator,
    crowdControlMachine = crowdControlMachine,
    crowdControlSettingsRepository = crowdControlSettingsRepository,
    crowdControlUserInputUtils = crowdControlUserInputUtils,
    timber = timber,
    timeZoneRepository = timeZoneRepository
)

bizhawkKeyMapper: BizhawkKeyMapperInterface = BizhawkKeyMapper(
    timber = timber
)

bizhawkSettingsRepository: BizhawkSettingsRepositoryInterface = BizhawkSettingsRepository(
    bizhawkKeyMapper = bizhawkKeyMapper,
    settingsJsonReader = JsonFileReader(
        eventLoop = eventLoop,
        fileName = '../config/bizhawkSettingsRepository.json',
    ),
)

crowdControlActionHandler: CrowdControlActionHandler = BizhawkActionHandler(
    bizhawkSettingsRepository = bizhawkSettingsRepository,
    timber = timber,
)


##########################################
## Cheer Actions initialization section ##
##########################################

cheerActionJsonMapper: CheerActionJsonMapperInterface = CheerActionJsonMapper(
    chatterInventoryMapper = chatterInventoryMapper,
)

cheerActionSettingsRepository: CheerActionSettingsRepositoryInterface = CheerActionSettingsRepository(
    settingsJsonReader = JsonFileReader(
        eventLoop = eventLoop,
        fileName = '../config/cheerActionSettings.json',
    ),
)

cheerActionsRepository: CheerActionsRepositoryInterface = CheerActionsRepository(
    backingDatabase = backingDatabase,
    cheerActionJsonMapper = cheerActionJsonMapper,
    cheerActionSettingsRepository = cheerActionSettingsRepository,
    timber = timber,
)

airStrikeCheerActionHelper: AirStrikeCheerActionHelperInterface = AirStrikeCheerActionHelper(
    chatterInventoryIdGenerator = chatterInventoryIdGenerator,
    chatterInventorySettings = chatterInventorySettings,
    useChatterItemHelper = useChatterItemHelper,
)

beanChanceCheerActionHelper: BeanChanceCheerActionHelperInterface = BeanChanceCheerActionHelper(
    beanStatsRepository = beanStatsRepository,
    soundPlayerManagerProvider = soundPlayerManagerProvider,
    timber = timber,
    trollmojiHelper = trollmojiHelper,
    twitchChatMessenger = twitchChatMessenger,
)

itemUseCheerActionHelper: ItemUseCheerActionHelperInterface = ItemUseCheerActionHelper(
    chatterInventoryIdGenerator = chatterInventoryIdGenerator,
    chatterInventorySettings = chatterInventorySettings,
    useChatterItemHelper = useChatterItemHelper,
)

soundAlertCheerActionHelper: SoundAlertCheerActionHelperInterface = SoundAlertCheerActionHelper(
    backgroundTaskHelper = backgroundTaskHelper,
    isLiveOnTwitchRepository = isLiveOnTwitchRepository,
    soundPlayerManagerProvider = soundPlayerManagerProvider,
    soundPlayerRandomizerHelper = soundPlayerRandomizerHelper,
    timber = timber,
)

timeoutCheerActionHelper: TimeoutCheerActionHelperInterface = TimeoutCheerActionHelper(
    chatterInventoryIdGenerator = chatterInventoryIdGenerator,
    chatterInventorySettings = chatterInventorySettings,
    useChatterItemHelper = useChatterItemHelper,
)

voicemailCheerActionHelper: VoicemailCheerActionHelperInterface = VoicemailCheerActionHelper(
    chatterInventoryIdGenerator = chatterInventoryIdGenerator,
    twitchMessageStringUtils = twitchMessageStringUtils,
    useChatterItemHelper = useChatterItemHelper,
)

cheerActionHelper: CheerActionHelperInterface = CheerActionHelper(
    adgeCheerActionHelper = None,
    airStrikeCheerActionHelper = airStrikeCheerActionHelper,
    beanChanceCheerActionHelper = beanChanceCheerActionHelper,
    cheerActionsRepository = cheerActionsRepository,
    crowdControlCheerActionHelper = crowdControlCheerActionHelper,
    itemUseCheerActionHelper = itemUseCheerActionHelper,
    soundAlertCheerActionHelper = soundAlertCheerActionHelper,
    timeoutCheerActionHelper = timeoutCheerActionHelper,
    twitchHandleProvider = authRepository,
    twitchTokensRepository = twitchTokensRepository,
    userIdsRepository = userIdsRepository,
    voicemailCheerActionHelper = voicemailCheerActionHelper,
)


#############################################
## Star Wars Quotes initialization section ##
#############################################

starWarsQuotesRepository: StarWarsQuotesRepositoryInterface = StarWarsQuotesRepository(
    quotesJsonReader = JsonFileReader(
        eventLoop = eventLoop,
        fileName = 'starWarsQuotesRepository.json',
    ),
)


##################################
## Jisho initialization section ##
##################################

jishoJsonMapper: JishoJsonMapperInterface = JishoJsonMapper(
    timber = timber,
)

jishoApiService: JishoApiServiceInterface = JishoApiService(
    jishoJsonMapper = jishoJsonMapper,
    networkClientProvider = networkClientProvider,
    timber = timber,
)

jishoPresenter: JishoPresenterInterface = JishoPresenter()

jishoHelper: JishoHelperInterface = JishoHelper(
    jishoApiService = jishoApiService,
    jishoPresenter = jishoPresenter,
    timber = timber,
)


#########################################
## Chat Actions initialization section ##
#########################################

accessLevelCheckingHelper: AccessLevelCheckingHelperInterface = AccessLevelCheckingHelper(
    twitchFollowingStatusRepository = twitchFollowingStatusRepository,
    twitchSubscriptionsRepository = twitchSubscriptionsRepository,
    twitchTokensRepository = twitchTokensRepository
)

anivCheckChatAction = AnivCheckChatAction(
    anivContentScanner = anivContentScanner,
    anivUserIdsRepository = anivUserIdsRepository,
    timber = timber,
    timeoutActionMachine = timeoutActionMachine,
    timeoutIdGenerator = timeoutIdGenerator,
    twitchHandleProvider = authRepository,
    twitchTokensRepository = twitchTokensRepository,
    userIdsRepository = userIdsRepository,
)

chatBackMessagesChatAction = ChatBackMessagesChatAction(
    timber = timber,
    twitchChatMessenger = twitchChatMessenger,
)

chatLoggerChatAction = ChatLoggerChatAction(
    chatLogger = chatLogger
)

cheerActionsWizard: CheerActionsWizardInterface = CheerActionsWizard(
    timber = timber,
)

cheerActionsWizardChatAction = CheerActionsWizardChatAction(
    chatterInventoryMapper = chatterInventoryMapper,
    cheerActionJsonMapper = cheerActionJsonMapper,
    cheerActionsRepository = cheerActionsRepository,
    cheerActionsWizard = cheerActionsWizard,
    timber = timber,
    twitchChatMessenger = twitchChatMessenger,
)

persistAllUsersChatAction = PersistAllUsersChatAction(
    generalSettingsRepository = generalSettingsRepository,
    userIdsRepository = userIdsRepository
)

recurringActionsWizardChatAction = RecurringActionsWizardChatAction(
    recurringActionsRepository = recurringActionsRepository,
    recurringActionsWizard = recurringActionsWizard,
    timber = timber,
    twitchChatMessenger = twitchChatMessenger,
)

saveMostRecentAnivMessageChatAction = SaveMostRecentAnivMessageChatAction(
    anivUserIdsRepository = anivUserIdsRepository,
    mostRecentAnivMessageRepository = mostRecentAnivMessageRepository,
)

soundAlertChatAction = SoundAlertChatAction(
    accessLevelCheckingHelper = accessLevelCheckingHelper,
    soundPlayerManagerProvider = soundPlayerManagerProvider,
    soundPlayerRandomizerHelper = soundPlayerRandomizerHelper,
    timber = timber
)

supStreamerRepository: SupStreamerRepositoryInterface = SupStreamerRepository(
    backingDatabase = backingDatabase,
    timber = timber,
    timeZoneRepository = timeZoneRepository
)

supStreamerHelper: SupStreamerHelperInterface = SupStreamerHelper()

supStreamerChatAction: SupStreamerChatAction = SupStreamerChatAction(
    streamAlertsManager = streamAlertsManager,
    supStreamerHelper = supStreamerHelper,
    supStreamerRepository = supStreamerRepository,
    timber = timber,
    timeZoneRepository = timeZoneRepository,
    twitchFollowingStatusRepository = twitchFollowingStatusRepository,
    twitchTokensRepository = twitchTokensRepository
)

ttsChatterRepository: TtsChatterRepositoryInterface = TtsChatterRepository(
    backingDatabase = backingDatabase,
    timber = timber
)

ttsChatterSettingsRepository: TtsChatterSettingsRepositoryInterface = TtsChatterSettingsRepository(
    settingsJsonReader = JsonFileReader(
        eventLoop = eventLoop,
        fileName = '../config/ttsChatterSettingsRepository.json'
    )
)

ttsChatterChatAction = TtsChatterChatAction(
    accessLevelCheckingHelper = accessLevelCheckingHelper,
    compositeTtsManagerProvider = compositeTtsManagerProvider,
    streamAlertsManager = streamAlertsManager,
    ttsChatterRepository = ttsChatterRepository,
    ttsChatterSettingsRepository = ttsChatterSettingsRepository
)

chatActionsManager: ChatActionsManagerInterface = ChatActionsManager(
    activeChattersRepository = activeChattersRepository,
    anivCheckChatAction = anivCheckChatAction,
    chatBackMessagesChatAction = chatBackMessagesChatAction,
    chatLoggerChatAction = chatLoggerChatAction,
    cheerActionsWizardChatAction = cheerActionsWizardChatAction,
    generalSettingsRepository = generalSettingsRepository,
    mostRecentAnivMessageTimeoutHelper = mostRecentAnivMessageTimeoutHelper,
    mostRecentChatsRepository = mostRecentChatsRepository,
    persistAllUsersChatAction = persistAllUsersChatAction,
    recurringActionsWizardChatAction = recurringActionsWizardChatAction,
    saveMostRecentAnivMessageChatAction = saveMostRecentAnivMessageChatAction,
    soundAlertChatAction = soundAlertChatAction,
    supStreamerChatAction = supStreamerChatAction,
    ttsChatterChatAction = ttsChatterChatAction,
    userIdsRepository = userIdsRepository,
    usersRepository = usersRepository,
    voicemailChatAction = voicemailChatAction
)


######################################################
## Channel Point Redemptions initialization section ##
######################################################

casualGamePollPointRedemption: CasualGamePollPointRedemption | None = CasualGamePollPointRedemption(
    timber = timber,
    twitchUtils = twitchUtils
)

cutenessPointRedemption: CutenessPointRedemption | None = CutenessPointRedemption(
    cutenessRepository = cutenessRepository,
    timber = timber,
    twitchUtils = twitchUtils
)

chatterPreferredTtsPointRedemption: ChatterPreferredTtsPointRedemption | None = ChatterPreferredTtsPointRedemption(
    chatterPreferredTtsHelper = chatterPreferredTtsHelper,
    chatterPreferredTtsPresenter = chatterPreferredTtsPresenter,
    chatterPreferredTtsSettingsRepository = chatterPreferredTtsSettingsRepository,
    timber = timber,
    twitchUtils = twitchUtils
)

decTalkSongPointRedemption: DecTalkSongPointRedemption | None = DecTalkSongPointRedemption(
    eventLoop = eventLoop,
    streamAlertsManager = streamAlertsManager,
    timber = timber
)

pkmnBattlePointRedemption: PkmnBattlePointRedemption | None = PkmnBattlePointRedemption(
    funtoonHelper = funtoonHelper,
    generalSettingsRepository = generalSettingsRepository,
    timber = timber,
    twitchUtils = twitchUtils
)

pkmnCatchPointRedemption: PkmnCatchPointRedemption | None = PkmnCatchPointRedemption(
    funtoonHelper = funtoonHelper,
    generalSettingsRepository = generalSettingsRepository,
    timber = timber,
    twitchUtils = twitchUtils
)

pkmnEvolvePointRedemption: PkmnEvolvePointRedemption | None = PkmnEvolvePointRedemption(
    funtoonHelper = funtoonHelper,
    generalSettingsRepository = generalSettingsRepository,
    timber = timber,
    twitchUtils = twitchUtils
)

pkmnShinyPointRedemption: PkmnShinyPointRedemption | None = PkmnShinyPointRedemption(
    funtoonHelper = funtoonHelper,
    generalSettingsRepository = generalSettingsRepository,
    timber = timber,
    twitchUtils = twitchUtils
)

soundAlertPointRedemption: SoundAlertPointRedemption | None = SoundAlertPointRedemption(
    soundPlayerManagerProvider = soundPlayerManagerProvider,
    soundPlayerRandomizerHelper = soundPlayerRandomizerHelper,
    streamAlertsManager = streamAlertsManager
)

superTriviaGamePointRedemption: SuperTriviaGamePointRedemption | None = SuperTriviaGamePointRedemption(
    timber = timber,
    triviaGameBuilder = triviaGameBuilder,
    triviaGameMachine = triviaGameMachine
)

superTriviaLotrGamePointRedemption: SuperTriviaLotrGamePointRedemption | None = SuperTriviaLotrGamePointRedemption(
    timber = timber,
    triviaGameBuilder = triviaGameBuilder,
    triviaGameMachine = triviaGameMachine,
)

triviaGamePointRedemption: TriviaGamePointRedemption | None = TriviaGamePointRedemption(
    timber = timber,
    triviaGameBuilder = triviaGameBuilder,
    triviaGameMachine = triviaGameMachine
)

ttsChatterPointRedemption: TtsChatterPointRedemption | None = TtsChatterPointRedemption(
    timber = timber,
    ttsChatterRepository = ttsChatterRepository,
    twitchUtils = twitchUtils
)


#################################
## Ecco initialization section ##
#################################

eccoResponseParser: EccoResponseParserInterface = EccoResponseParser(
    timber = timber,
    timeZoneRepository = timeZoneRepository
)

eccoApiService: EccoApiServiceInterface = EccoApiService(
    eccoResponseParser = eccoResponseParser,
    networkClientProvider = networkClientProvider,
    timber = timber
)

eccoHelper: EccoHelperInterface = EccoHelper(
    eccoApiService = eccoApiService,
    timber = timber,
    timeZoneRepository = timeZoneRepository
)


########################################################
## Websocket Connection Server initialization section ##
########################################################

websocketConnectionServerSettings: WebsocketConnectionServerSettingsInterface = WebsocketConnectionServerSettings(
    settingsJsonReader = JsonFileReader(
        eventLoop = eventLoop,
        fileName = '../config/websocketConnectionServerSettings.json'
    )
)

websocketEventTypeMapper: WebsocketEventTypeMapperInterface = WebsocketEventTypeMapper()

websocketConnectionServer: WebsocketConnectionServerInterface = WebsocketConnectionServer(
    backgroundTaskHelper = backgroundTaskHelper,
    timber = timber,
    timeZoneRepository = timeZoneRepository,
    websocketConnectionServerSettings = websocketConnectionServerSettings,
    websocketEventTypeMapper = websocketEventTypeMapper
)


###############################################
## Redemption Counter initialization section ##
###############################################

redemptionCounterRepository: RedemptionCounterRepositoryInterface = RedemptionCounterRepository(
    backingDatabase = backingDatabase,
    timber = timber,
)

redemptionCounterSettings: RedemptionCounterSettingsInterface = RedemptionCounterSettings(
    settingsJsonReader = JsonFileReader(
        eventLoop = eventLoop,
        fileName = '../config/redemptionCounterSettings.json',
    ),
)

redemptionCounterHelper: RedemptionCounterHelperInterface = RedemptionCounterHelper(
    redemptionCounterRepository = redemptionCounterRepository,
    redemptionCounterSettings = redemptionCounterSettings,
    timber = timber,
    twitchTokensUtils = twitchTokensUtils,
    userIdsRepository = userIdsRepository,
)

redemptionCounterPointRedemption = RedemptionCounterPointRedemption(
    redemptionCounterHelper = redemptionCounterHelper,
    redemptionCounterSettings = redemptionCounterSettings,
    timber = timber,
    trollmojiHelper = trollmojiHelper,
    twitchChatMessenger = twitchChatMessenger,
)


##########################################
## Twitch events initialization section ##
##########################################

twitchChannelPointRedemptionHandler: AbsTwitchChannelPointRedemptionHandler = TwitchChannelPointRedemptionHandler(
    backgroundTaskHelper = backgroundTaskHelper,
    casualGamePollPointRedemption = casualGamePollPointRedemption,
    chatterPreferredTtsPointRedemption = chatterPreferredTtsPointRedemption,
    cutenessPointRedemption = cutenessPointRedemption,
    decTalkSongPointRedemption = decTalkSongPointRedemption,
    pkmnBattlePointRedemption = pkmnBattlePointRedemption,
    pkmnCatchPointRedemption = pkmnCatchPointRedemption,
    pkmnEvolvePointRedemption = pkmnEvolvePointRedemption,
    pkmnShinyPointRedemption = pkmnShinyPointRedemption,
    redemptionCounterPointRedemption = redemptionCounterPointRedemption,
    soundAlertPointRedemption = soundAlertPointRedemption,
    superTriviaGamePointRedemption = superTriviaGamePointRedemption,
    superTriviaLotrGamePointRedemption = superTriviaLotrGamePointRedemption,
    triviaGamePointRedemption = triviaGamePointRedemption,
    ttsChatterPointRedemption = ttsChatterPointRedemption,
    timber = timber,
    userIdsRepository = userIdsRepository,
    voicemailPointRedemption = voicemailPointRedemption,
)

twitchChatHandler: AbsTwitchChatHandler = TwitchChatHandler(
    backgroundTaskHelper = backgroundTaskHelper,
    chatLogger = chatLogger,
    cheerActionHelper = cheerActionHelper,
    streamAlertsManager = streamAlertsManager,
    timber = timber,
    triviaGameBuilder = triviaGameBuilder,
    triviaGameMachine = triviaGameMachine,
)

twitchCheerHandler: AbsTwitchCheerHandler = TwitchCheerHandler(
    chatLogger = chatLogger,
    cheerActionHelper = cheerActionHelper,
    streamAlertsManager = streamAlertsManager,
    timber = timber,
    triviaGameBuilder = triviaGameBuilder,
    triviaGameMachine = triviaGameMachine,
)

twitchFollowHandler: AbsTwitchFollowHandler = TwitchFollowHandler(
    timber = timber,
    twitchFollowingStatusRepository = twitchFollowingStatusRepository,
)

twitchHypeTrainHandler: AbsTwitchHypeTrainHandler = TwitchHypeTrainHandler(
    streamAlertsManager = streamAlertsManager,
    timber = timber,
    twitchChatMessenger = twitchChatMessenger,
)

twitchPollHandler: AbsTwitchPollHandler = TwitchPollHandler(
    streamAlertsManager = streamAlertsManager,
    timber = timber,
    twitchChatMessenger = twitchChatMessenger,
)

twitchPredictionHandler: AbsTwitchPredictionHandler = TwitchPredictionHandler(
    activeChattersRepository = activeChattersRepository,
    streamAlertsManager = streamAlertsManager,
    timber = timber,
    twitchChatMessenger = twitchChatMessenger,
    twitchPredictionWebsocketUtils = twitchPredictionWebsocketUtils,
    websocketConnectionServer = websocketConnectionServer,
)

twitchRaidHandler: AbsTwitchRaidHandler = TwitchRaidHandler(
    chatLogger = chatLogger,
    streamAlertsManager = streamAlertsManager,
    timber = timber,
)

twitchSubscriptionHandler: AbsTwitchSubscriptionHandler = TwitchSubscriptionHandler(
    officialTwitchAccountUserIdProvider = officialTwitchAccountUserIdProvider,
    streamAlertsManager = streamAlertsManager,
    timber = timber,
    triviaGameBuilder = triviaGameBuilder,
    triviaGameMachine = triviaGameMachine,
    twitchChatMessenger = twitchChatMessenger,
    twitchEmotesHelper = twitchEmotesHelper,
    twitchHandleProvider = authRepository,
    twitchTokensUtils = twitchTokensUtils,
    userIdsRepository = userIdsRepository,
)


#####################################
## CynanBot initialization section ##
#####################################

cynanBot = CynanBot(
    eventLoop = eventLoop,
    twitchChannelPointRedemptionHandler = twitchChannelPointRedemptionHandler,
    twitchChatHandler = twitchChatHandler,
    twitchCheerHandler = twitchCheerHandler,
    twitchFollowHandler = twitchFollowHandler,
    twitchHypeTrainHandler = twitchHypeTrainHandler,
    twitchPollHandler = twitchPollHandler,
    twitchPredictionHandler = twitchPredictionHandler,
    twitchRaidHandler = twitchRaidHandler,
    twitchSubscriptionHandler = twitchSubscriptionHandler,
    activeChattersRepository = activeChattersRepository,
    additionalTriviaAnswersRepository = additionalTriviaAnswersRepository,
    addOrRemoveUserDataHelper = addOrRemoveUserDataHelper,
    airStrikeCheerActionHelper = airStrikeCheerActionHelper,
    administratorProvider = administratorProvider,
    anivCopyMessageTimeoutScoreHelper = anivCopyMessageTimeoutScoreHelper,
    anivCopyMessageTimeoutScorePresenter = anivCopyMessageTimeoutScorePresenter,
    anivSettings = anivSettings,
    asplodieStatsPresenter = asplodieStatsPresenter,
    asplodieStatsRepository = asplodieStatsRepository,
    authRepository = authRepository,
    backgroundTaskHelper = backgroundTaskHelper,
    bannedTriviaGameControllersRepository = bannedTriviaGameControllersRepository,
    bannedWordsRepository = bannedWordsRepository,
    beanChanceCheerActionHelper = beanChanceCheerActionHelper,
    beanStatsPresenter = beanStatsPresenter,
    beanStatsRepository = beanStatsRepository,
    bizhawkSettingsRepository = bizhawkSettingsRepository,
    chatActionsManager = chatActionsManager,
    chatLogger = chatLogger,
    chatterInventoryHelper = chatterInventoryHelper,
    chatterInventoryIdGenerator = chatterInventoryIdGenerator,
    chatterInventoryItemUseMachine = chatterInventoryItemUseMachine,
    chatterInventoryMapper = chatterInventoryMapper,
    chatterInventorySettings = chatterInventorySettings,
    chatterItemEventHandler = chatterItemEventHandler,
    chatterPreferredTtsHelper = chatterPreferredTtsHelper,
    chatterPreferredTtsPresenter = chatterPreferredTtsPresenter,
    chatterPreferredTtsRepository = chatterPreferredTtsRepository,
    chatterPreferredTtsSettingsRepository = chatterPreferredTtsSettingsRepository,
    chatterPreferredTtsUserMessageHelper = chatterPreferredTtsUserMessageHelper,
    cheerActionHelper = cheerActionHelper,
    cheerActionJsonMapper = cheerActionJsonMapper,
    cheerActionSettingsRepository = cheerActionSettingsRepository,
    cheerActionsRepository = cheerActionsRepository,
    cheerActionsWizard = cheerActionsWizard,
    commodoreSamSettingsRepository = commodoreSamSettingsRepository,
    compositeTtsManagerProvider = compositeTtsManagerProvider,
    crowdControlActionHandler = crowdControlActionHandler,
    crowdControlAutomator = crowdControlAutomator,
    crowdControlIdGenerator = crowdControlIdGenerator,
    crowdControlMachine = crowdControlMachine,
    crowdControlMessageListener = crowdControlMessageListener,
    crowdControlSettingsRepository = crowdControlSettingsRepository,
    crowdControlUserInputUtils = crowdControlUserInputUtils,
    cutenessPresenter = cutenessPresenter,
    cutenessRepository = cutenessRepository,
    cutenessUtils = cutenessUtils,
    decTalkSettingsRepository = decTalkSettingsRepository,
    eccoHelper = eccoHelper,
    funtoonHelper = funtoonHelper,
    funtoonTokensRepository = funtoonTokensRepository,
    generalSettingsRepository = generalSettingsRepository,
    googleSettingsRepository = googleSettingsRepository,
    guaranteedTimeoutUsersRepository = guaranteedTimeoutUsersRepository,
    halfLifeSettingsRepository = halfLifeSettingsRepository,
    isLiveOnTwitchRepository = isLiveOnTwitchRepository,
    jishoHelper = jishoHelper,
    languagesRepository = languagesRepository,
    locationsRepository = locationsRepository,
    microsoftSamSettingsRepository = microsoftSamSettingsRepository,
    mostRecentAnivMessageRepository = mostRecentAnivMessageRepository,
    mostRecentAnivMessageTimeoutHelper = mostRecentAnivMessageTimeoutHelper,
    mostRecentChatsRepository = mostRecentChatsRepository,
    openTriviaDatabaseSessionTokenRepository = openTriviaDatabaseSessionTokenRepository,
    pixelsDiceEventListener = pixelsDiceEventHandler,
    pixelsDiceMachine = pixelsDiceMachine,
    pokepediaRepository = pokepediaRepository,
    psqlCredentialsProvider = psqlCredentialsProvider,
    recurringActionsEventHandler = recurringActionsEventHandler,
    recurringActionsHelper = recurringActionsHelper,
    recurringActionsMachine = recurringActionsMachine,
    recurringActionsRepository = recurringActionsRepository,
    recurringActionsWizard = recurringActionsWizard,
    sentMessageLogger = sentMessageLogger,
    shinyTriviaOccurencesRepository = shinyTriviaOccurencesRepository,
    soundPlayerManagerProvider = soundPlayerManagerProvider,
    soundPlayerRandomizerHelper = soundPlayerRandomizerHelper,
    soundPlayerSettingsRepository = soundPlayerSettingsRepository,
    starWarsQuotesRepository = starWarsQuotesRepository,
    streamAlertsManager = streamAlertsManager,
    streamAlertsSettingsRepository = streamAlertsSettingsRepository,
    streamElementsSettingsRepository = streamElementsSettingsRepository,
    streamElementsUserKeyRepository = streamElementsUserKeyRepository,
    supStreamerRepository = supStreamerRepository,
    timber = timber,
    timeoutActionMachine = timeoutActionMachine,
    timeoutActionSettings = timeoutActionSettings,
    timeoutEventHandler = timeoutEventHandler,
    timeoutImmuneUserIdsRepository = timeoutImmuneUserIdsRepository,
    timeZoneRepository = timeZoneRepository,
    toxicTriviaOccurencesRepository = toxicTriviaOccurencesRepository,
    translationHelper = translationHelper,
    triviaBanHelper = triviaBanHelper,
    triviaEmoteGenerator = triviaEmoteGenerator,
    triviaEventHandler = triviaEventHandler,
    triviaGameBuilder = triviaGameBuilder,
    triviaGameControllersRepository = triviaGameControllersRepository,
    triviaGameGlobalControllersRepository = triviaGameGlobalControllersRepository,
    triviaGameMachine = triviaGameMachine,
    triviaHistoryRepository = triviaHistoryRepository,
    triviaIdGenerator = triviaIdGenerator,
    triviaQuestionOccurrencesRepository = triviaQuestionOccurrencesRepository,
    triviaRepository = triviaRepository,
    triviaScoreRepository = triviaScoreRepository,
    triviaSettingsRepository = triviaSettingsRepository,
    triviaTwitchEmoteHelper = triviaTwitchEmoteHelper,
    triviaUtils = triviaUtils,
    trollmojiHelper = trollmojiHelper,
    trollmojiSettingsRepository = trollmojiSettingsRepository,
    ttsChatterRepository = ttsChatterRepository,
    ttsChatterSettingsRepository = ttsChatterSettingsRepository,
    ttsJsonMapper = ttsJsonMapper,
    ttsMonsterSettingsRepository = ttsMonsterSettingsRepository,
    ttsMonsterTokensRepository = ttsMonsterTokensRepository,
    ttsSettingsRepository = ttsSettingsRepository,
    twitchApiService = twitchApiService,
    twitchChannelEditorsRepository = twitchChannelEditorsRepository,
    twitchChannelJoinHelper = twitchChannelJoinHelper,
    twitchChatMessenger = twitchChatMessenger,
    twitchConfiguration = twitchConfiguration,
    twitchEmotesHelper = twitchEmotesHelper,
    twitchFollowingStatusRepository = twitchFollowingStatusRepository,
    twitchFriendsUserIdRepository = twitchFriendsUserIdRepository,
    twitchMessageStringUtils = twitchMessageStringUtils,
    twitchPredictionWebsocketUtils = twitchPredictionWebsocketUtils,
    twitchSubscriptionsRepository = twitchSubscriptionsRepository,
    twitchTimeoutHelper = twitchTimeoutHelper,
    twitchTimeoutRemodHelper = twitchTimeoutRemodHelper,
    twitchTokensRepository = twitchTokensRepository,
    twitchTokensUtils = twitchTokensUtils,
    twitchUtils = twitchUtils,
    twitchWebsocketClient = twitchWebsocketClient,
    twitchWebsocketSettingsRepository = twitchWebsocketSettingsRepository,
    useChatterItemHelper = useChatterItemHelper,
    userIdsRepository = userIdsRepository,
    usersRepository = usersRepository,
    voicemailHelper = voicemailHelper,
    voicemailsRepository = voicemailsRepository,
    voicemailSettingsRepository = voicemailSettingsRepository,
    weatherReportPresenter = weatherReportPresenter,
    weatherRepository = weatherRepository,
    websocketConnectionServer = websocketConnectionServer,
    wordOfTheDayPresenter = wordOfTheDayPresenter,
    wordOfTheDayRepository = wordOfTheDayRepository,
)


#########################################
## Section for starting the actual bot ##
#########################################

timber.log('initCynanBot', 'Starting CynanBot...')
cynanBot.run()
